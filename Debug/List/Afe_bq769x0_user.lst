###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.31.1.20058 [Evaluation] for STM810/Apr/2016  18:26:57 #
# Copyright 2010-2012 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0\sys\src #
#                    \Afe_bq769x0_user.c                                      #
#    Command line =  D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0\sys\src #
#                    \Afe_bq769x0_user.c -e --enable_multibytes -Ohz --debug  #
#                    --code_model small --data_model medium -o                #
#                    D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0\Debug\O #
#                    bj\ --dlib_config "C:\Program Files\IAR                  #
#                    Systems\Embedded Workbench 6.0                           #
#                    Evaluation\stm8\LIB\dlstm8smn.h" -lcN                    #
#                    D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0\Debug\L #
#                    ist\ -I D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0 #
#                    /user/\ -I D:\ProjectPath\STMPath\CH79_A0_C-version\CH79 #
#                    _A0/user/src/\ -I D:\ProjectPath\STMPath\CH79_A0_C-versi #
#                    on\CH79_A0/user/inc/\ -I D:\ProjectPath\STMPath\CH79_A0_ #
#                    C-version\CH79_A0/addon/\ -I                             #
#                    D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0/addon/s #
#                    rc/\ -I D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0 #
#                    /addon/inc/\ -I D:\ProjectPath\STMPath\CH79_A0_C-version #
#                    \CH79_A0/sys/\ -I D:\ProjectPath\STMPath\CH79_A0_C-versi #
#                    on\CH79_A0/sys/inc/\ -I D:\ProjectPath\STMPath\CH79_A0_C #
#                    -version\CH79_A0/sys/src/\ -I                            #
#                    D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0/lib/\   #
#                    -I D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0/lib/ #
#                    src/\ -I D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A #
#                    0/lib/inc/\ --vregs 16                                   #
#    List file    =  D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0\Debug\L #
#                    ist\Afe_bq769x0_user.lst                                 #
#    Object file  =  D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0\Debug\O #
#                    bj\Afe_bq769x0_user.o                                    #
#                                                                             #
#                                                                             #
###############################################################################

D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0\sys\src\Afe_bq769x0_user.c
      1          //
      2          #include "stm8s.h" 
      3          #include "user.h"
      4          #include "macro_def.h"
      5          #include "iostm8s003f3.h"
      6          #include "bq769x0.h"
      7          
      8          #if 1
      9          void Afe_CellBalance_Enable(uint16_t selct)
     10          { 
     11            //==============cell balance on
     12            CELLBAL1_Last = (uint8_t)(selct & 0x001F);
     13            I2C_Write(CELLBAL1_ADDR,CELLBAL1_Last);
     14            CELLBAL2_Last =  (uint8_t)(selct >> 5);
     15            I2C_Write(CELLBAL2_ADDR,CELLBAL2_Last);
     16          }
     17          void Afe_CellBalance_Disable(void)
     18          { 
     19            uint8_t tmp1 = 0x01;
     20            uint8_t tmp2 = 0x01;
     21              CellBal_Cntrl_Lock = 0;
     22              CellBalance_Cur_Selct = 0;
     23              //==============cell balance off
     24              CELLBAL1_Last = 0x00;
     25              I2C_Write(CELLBAL1_ADDR,CELLBAL1_Last);
     26              CELLBAL2_Last = 0x00;
     27              I2C_Write(CELLBAL2_ADDR,CELLBAL2_Last);
     28              
     29              I2C_Read(CELLBAL2_ADDR,&tmp1);
     30              if(tmp1 == 0x00)
     31              {
     32                I2C_Read(CELLBAL2_ADDR,&tmp2);
     33                if(tmp2 == 0x00)
     34                { 
     35                  CellBalance_Selct = 0;
     36                  CellBal_Cntrl_Lock = 0;
     37                }
     38              }   
     39          }
     40          //====================================================================
     41          uint16_t Afe_Get_Adc(uint8_t addr)
     42          { 
     43            uint8_t adcval,tmpval = 0; 
     44            uint16_t adv_result ;    
     45            I2C_Read(addr,&tmpval);
     46            adcval = tmpval;
     47            I2C_Read(addr + 1,&tmpval);
     48            adv_result = ((uint16_t)adcval << 8 ) + (uint16_t)tmpval;
     49            return adv_result; 
     50          }
     51          //==========================================================================
     52          /*      SYS_STAT (0x00)/RESET:0x00
     53                  BIT        7      6           5             4       3   2    1     0
     54                  NAME   CC_READY  RSVD   DEVICE_XREADY   OVRD_ALERT  UV  OV  SCD   OCD
     55            Why is the DEVICE_XREADY bit high on my part and it cannot be cleared?
     56              For the bq76930 and bq76940 it typically indicates that the voltage on the bottom cell group is adequate,
     57              but one of the upper cell groups’ supply voltage is below VSHUT. Raise all cell group supply voltages above
     58              VPORA and clear the status bit. Another possibility is that the part has been damaged.
     59          */
     60          void ChgDis_AbnormalCheck(void)
     61          {
     62            static uint8_t AfeErr_Cnt = 0; 
     63            //========================================
     64            if(WorkMode == CHARGE_MODE)
     65            { 
     66              FAULT_DETECT_CTRL_ON();
     67              if(!SYS_CTRL2.Bit.CHG_ON || (SYS_CTRL2.Bit.CHG_ON && CC_Val >= 10))
     68              {
     69                Chg_Current_Val_Small_Errer_t = 0;
     70              }
     71              if((CC_Val < (-50)) || Bits_flag.Bit.AfeErr || IS_FAULT_ON() || Cell_Volt_Max >= 4300 || SYS_STAT.Bit.DEVICE_XREADY ||(Chg_Current_Val_Small_Errer_t >= 18000))         // 充电状态检测到放电电流
     72              { 
     73          #ifdef Uart_Model_Enable
     74                if((AfeErr_Cnt ++) >= 10)
     75                {
     76                  AfeErr_Cnt = 10;
     77                  Bits_flag.Bit.AfeErr = 1;
     78                }
     79          #else
     80                if((AfeErr_Cnt ++) >= 100)
     81                {
     82                  AfeErr_Cnt = 100;
     83                  Bits_flag.Bit.AfeErr = 1;
     84                }
     85          #endif
     86              }
     87              else
     88              {
     89                AfeErr_Cnt = 0;
     90                AfeErr_t = 0;
     91              }
     92            }
     93            else if(WorkMode == DISCHARGE_MODE)
     94            {
     95              if((CC_Val >= 50) ||Bits_flag.Bit.AfeErr || Cell_Volt_Max >= 4300 || SYS_STAT.Bit.DEVICE_XREADY)         // 放电状态检测到充电电流
     96              { 
     97          #ifdef Uart_Model_Enable
     98                if((AfeErr_Cnt ++) >= 10)
     99                {
    100                  AfeErr_Cnt = 10;
    101                  Bits_flag.Bit.AfeErr = 1;
    102                }
    103          #else
    104                if((AfeErr_Cnt ++) >= 100)
    105                {
    106                  AfeErr_Cnt = 100;
    107                  Bits_flag.Bit.AfeErr = 1;
    108                }
    109          #endif
    110              }
    111              else
    112              {
    113                AfeErr_Cnt = 0;
    114                AfeErr_t = 0;
    115              }
    116            }
    117            else
    118            {
    119              AfeErr_Cnt = 0;
    120            }
    121                
    122            /*  
    123            //====================================================
    124            
    125            if(SYS_STAT.Bit.DEVICE_XREADY)// || SYS_STAT.Bit.OVRD_ALERT)
    126            {
    127              Bits_flag.Bit.AfeErr = 1;
    128            } 
    129            if(Bits_flag.Bit.AfeErr )//&& DEVICE_XREADY_Re_t >= DEVICE_XREADY_Re_SET)//SYS_STAT.Bit.DEVICE_XREADY
    130            { 
    131              SYS_STAT_Last |= 0x30;
    132              //SYS_STAT_Last_tmp = SYS_STAT_Last & 0xF0
    133              I2C_Write(SYS_STAT_ADDR,SYS_STAT_Last);
    134              SYS_STAT_Last &= ~0x30;
    135              
    136              SYS_STAT.Bit.DEVICE_XREADY = 0;
    137              Bits_flag.Bit.AfeErr = 0;
    138              DEVICE_XREADY_Re_t = 0;
    139              Afe_Device_Init(); 
    140            } 
    141             */
    142          }
    143          #if 0
    144          void Afe_AbnormalCheck(void)
    145          {
    146            /* 
    147            if(SYS_STAT.Bit.DEVICE_XREADY)// || SYS_STAT.Bit.OVRD_ALERT)
    148            {
    149              Bits_flag.Bit.AfeErr = 1;
    150            } 
    151             
    152            if(SYS_STAT.Bit.OVRD_ALERT)
    153            {
    154              //SYS_STAT_Last &= ~0x0F;
    155              SYS_STAT_Last |= 0x10;
    156              I2C_Write(SYS_STAT_ADDR,SYS_STAT_Last);
    157              SYS_STAT_Last &= ~0x10;
    158              SYS_STAT.Bit.OVRD_ALERT = 0;
    159            }*/
    160            if(Bits_flag.Bit.AfeErr )//&& DEVICE_XREADY_Re_t >= DEVICE_XREADY_Re_SET)//SYS_STAT.Bit.DEVICE_XREADY
    161            {  
    162              SYS_STAT_Last |= 0x30;
    163              I2C_Write(SYS_STAT_ADDR,SYS_STAT_Last & 0xF0);
    164              SYS_STAT_Last &= ~0x30;
    165              
    166              SYS_STAT.Bit.DEVICE_XREADY = 0;
    167              Bits_flag.Bit.AfeErr = 0;
    168              DEVICE_XREADY_Re_t = 0;
    169              Afe_Device_Init();
    170              /*
    171              Afe_SCD_Set(SCD_THREHOLD_VAL_SET, SCD_DELAY_SET);
    172              Afe_OCD_Set(OCD_THREHOLD_VAL_SET, OCD_DELAY_SET);
    173              Afe_OV_UV_Delay_Set(OV_DELAY_SET,UV_DELAY_SET); 
    174              Afe_OV_UV_Threshold_Set(OV_THREHOLD_VAL_SET, UV_THREHOLD_VAL_SET);
    175              */
    176            } 
    177               
    178          }
    179          #endif
    180          //==========================================================================
    181          /*
    182            Waking from SHIP mode to NORMAL mode requires pulling the TS1 pin greater than VBOOT, which triggers the device boot-up sequence.
    183            In order to exit SHIP mode into NORMAL mode, the device must follow the standard boot sequence by applying a voltage greater than the VBOOT threshold on the TS1 pin.
    184            
    185          To enter SHIP mode from NORMAL mode, the [SHUT_A] and [SHUT_B] bits in the SYS_CTRL1 register must be written with specific patterns across two consecutive writes:
    186             Write #1: [SHUT_A] = 0, [SHUT_B] = 1
    187             Write #2: [SHUT_A] = 1, [SHUT_B] = 0
    188            Table 7-7. SYS_CTRL1 (0x04)/RESET:0x00
    189            BIT       7         6   5     4         3       2     1       0
    190            NAME  LOAD_PRESENT  ―  ―  ADC_EN  TEMP_SEL  RSVD  SHUT_A  SHUT_B
    191          */
    192          
    193          void Afe_EnterShipMode(void)
    194          {
    195            SYS_CTRL1_Last &= ~0x02;
    196            SYS_CTRL1_Last |= 0x01;
    197            I2C_Write(SYS_CTRL1_ADDR,SYS_CTRL1_Last);
    198            
    199            SYS_CTRL1_Last |= 0x02;
    200            SYS_CTRL1_Last &= ~0x01;
    201            I2C_Write(SYS_CTRL1_ADDR,SYS_CTRL1_Last);
    202          }
    203           void Afe_ADC_Disable(void)
    204           { 
    205            //==ADC enable command
    206            SYS_CTRL1_Last &= ~0x10;
    207            I2C_Write(SYS_CTRL1_ADDR,SYS_CTRL1_Last);
    208           }
    209          //==========================================================================
    210          /* This bit is set automatically whenever the device enters NORMAL mode. 
    211             When enabled, the ADC ensures that the integrated OV and UV protections are functional.*/
    212          void Afe_ADC_Enable(void)
    213          {
    214            //==ADC enable command
    215            SYS_CTRL1_Last |= 0x10;
    216            I2C_Write(SYS_CTRL1_ADDR,SYS_CTRL1_Last);
    217          }
    218           
    219          void Afe_Temp_Disable(void)
    220          {
    221            //==TEMP_SEL (Bit 3): TSx_HI and TSx_LO temperature source
    222            SYS_CTRL1_Last &= ~0x08;
    223            I2C_Write(SYS_CTRL1_ADDR,SYS_CTRL1_Last);
    224          }
    225          //========================================================================== 
    226          void Afe_Temp_Enable(void)
    227          {
    228            //==TEMP_SEL (Bit 3): TSx_HI and TSx_LO temperature source
    229            SYS_CTRL1_Last |= 0x08;
    230            I2C_Write(SYS_CTRL1_ADDR,SYS_CTRL1_Last);
    231          }
    232          
    233          //===============================================
    234          //ADCGAIN is stored in units of μV/LSB, while ADCOFFSET is stored in mV.
    235          void Afe_Get_GainOffset(void)
    236          {
    237            uint8_t tmpval = 0;
    238            uint8_t gain_val_tmp = 0;
    239            
    240            //==get adc gian value 
    241            I2C_Read(ADCGAIN1_ADDR,&tmpval);
    242            gain_val_tmp = (tmpval & 0x0C)>>2; 
    243            I2C_Read(ADCGAIN2_ADDR,&tmpval); 
    244            gain_val_tmp = (gain_val_tmp << 3) + ((tmpval & 0xE0) >> 5); 
    245            ADCGain_Val = 365 + gain_val_tmp;
    246            
    247            //===get adc offset value
    248            I2C_Read(ADCOFFSET_ADDR,&tmpval );
    249            ADCOffset_Val = tmpval ;
    250            
    251            
    252             // Uart_SendByte(gain_val_tmp); //0x0C =12
    253             // Uart_SendByte((uint8_t)(ADCGain_Val>>8)); //12
    254             // Uart_SendByte((uint8_t)ADCGain_Val); //12
    255             // Uart_SendByte(ADCOffset_Val); //0x31=49
    256          }
    257          //==========================================================================
    258          void Afe_Device_Init(void)
    259          { 
    260            uint8_t tmp = 0; 
    261            //==For optimal performance, these bits should be programmed to 0x19 upon device startup
    262            I2C_Write(CC_CFG_ADDR,CC_CFG_INIT_VAL);   // 初始化CC_CFG寄存器为0x19 
    263            
    264            Afe_FET_ChgOff_DisOff(); // 关闭充电MOS、关闭放电MOS 
    265            //Delay_ms(100); 
    266            I2C_Write(SYS_STAT_ADDR,0xFF);   // SYS_STAT寄存器清零，写"1"清零
    267            SYS_STAT_Last = 0x00;  
    268            SYS_STAT_Last_tmp = 0x00;
    269            ClrWdt(); 
    270            //Delay_us(50);  
    271             /**/
    272            Afe_CellBalance_Disable();       // 关闭充电均衡
    273            Afe_Get_SysStatus();             // 读取AFE IC的状态
    274            ClrWdt();                   
    275            Afe_ADC_Enable();                // 开启ADC模块，同时使能过放UV、过充OV硬件检测功能
    276            Afe_CC_Disable();                // 关闭电流检测模块
    277            ClrWdt(); 
    278            Afe_CC_1Shot_Set();              // 开启电流检测--单次采样模式
    279            Afe_Temp_Enable();               // 开启温度检测模块
    280            Afe_Get_GainOffset();            // 获取电芯采样值得Gain Offset值，用来电芯电压AD值换算实际电压值（单位mV）//ADCGain_Val = 377 ADCOffset_Val = 47
    281            ClrWdt();   
    282            Afe_SCD_Set(SCD_THREHOLD_VAL_SET, SCD_DELAY_SET);  // 设置短路电流保护值、及延时时间（参数虚设，请在函数内部进行修改）
    283            Afe_OCD_Set(OCD_THREHOLD_VAL_SET, OCD_DELAY_SET);  // 设置放电过流保护值及延时时间（参数虚设，请在函数内部进行修改）
    284            ClrWdt(); 
    285            Afe_OV_UV_Delay_Set(OV_DELAY_SET,UV_DELAY_SET);    // 设置过充OV、过放UV的保护电压值
    286            Afe_OV_UV_Threshold_Set(OV_THREHOLD_VAL_SET, UV_THREHOLD_VAL_SET);  // 设置过充OV、过放UV的保护的延时时间
    287          }
    288          
    289          //==========================================================================
    290          void Afe_SCD_Set(uint16_t SCD_val, uint16_t SCD_delay)//mA
    291          {
    292            uint8_t RSNS_mark = 0;
    293            uint8_t SCD_val_tmp = 0;
    294            uint8_t SCD_delay_tmp = 0;
    295            SCD_val = (uint16_t)((uint32_t)5*SCD_val/1000);
    296            if(SCD_val > 100)
    297            {
    298              RSNS_mark = 0x01; 
    299              if(SCD_val > 178)
    300              {
    301                SCD_val_tmp = 0x07;  // 200mV
    302              }
    303              else if(SCD_val > 155)
    304              {
    305                SCD_val_tmp = 0x06;  // 178mV
    306              }
    307              else if(SCD_val > 133)
    308              {
    309                SCD_val_tmp = 0x05;  // 155mV
    310              } 
    311              else if(SCD_val > 111)
    312              {
    313                SCD_val_tmp = 0x04;  // 133mV
    314              }
    315              else if(SCD_val > 89)
    316              {
    317                SCD_val_tmp = 0x03;  // 111mV
    318              } 
    319              else if(SCD_val > 67)
    320              {
    321                SCD_val_tmp = 0x02;  // 89mV
    322              }
    323              else if(SCD_val > 44)
    324              {
    325                SCD_val_tmp = 0x01;  // 67mV
    326              } 
    327              else
    328              {
    329                SCD_val_tmp = 0x00;  // 44mV
    330              } 
    331            }
    332            else
    333            {
    334              if(SCD_val > 89)
    335              {
    336                SCD_val_tmp = 0x07;  // 100mV
    337              }
    338              else if(SCD_val > 78)
    339              {
    340                SCD_val_tmp = 0x06;  // 89mV
    341              }
    342              else if(SCD_val > 67)
    343              {
    344                SCD_val_tmp = 0x05;  // 78mV
    345              } 
    346              else if(SCD_val > 56)
    347              {
    348                SCD_val_tmp = 0x04;  // 67mV
    349              }
    350              else if(SCD_val > 44)
    351              {
    352                SCD_val_tmp = 0x03;  // 56mV
    353              } 
    354              else if(SCD_val > 33)
    355              {
    356                SCD_val_tmp = 0x02;  // 44mV
    357              }
    358              else if(SCD_val > 22)
    359              {
    360                SCD_val_tmp = 0x01;  // 33mV
    361              } 
    362              else
    363              {
    364                SCD_val_tmp = 0x00;  // 22mV
    365              } 
    366            } 
    367            //========================
    368            if(SCD_delay > 200)
    369            {
    370              SCD_delay_tmp = 0x03;  // 400uS
    371            }
    372            else if(SCD_delay > 100)
    373            {
    374              SCD_delay_tmp = 0x02;  // 200uS
    375            }
    376            else if(SCD_delay > 70)
    377            {
    378              SCD_delay_tmp = 0x01;  // 100uS
    379            } 
    380            else
    381            {
    382              SCD_delay_tmp = 0x00;  // 70uS
    383            }
    384            //== Protect page36
    385            RSNS_mark = 1;
    386            //SCD_val_tmp = 0x02;    // 44mV
    387            SCD_val_tmp = 0x07;      // 200mV/5mR = 40A   
    388            SCD_delay_tmp = 0x03;    // 70uS
    389            //PROTECT1_Last =  (RSNS_mark <<7) + (SCD_delay_tmp << 3) + SCD_val_tmp; //SCD
    390            PROTECT1_Last =  0x80 + (SCD_delay_tmp << 3) + SCD_val_tmp; //SCD
    391            I2C_Write(PROTECT1_ADDR,PROTECT1_Last);
    392          }
    393          
    394          //==========================================================================
    395          void Afe_OCD_Set(uint16_t OCD_val, uint16_t OCD_delay)
    396          { 
    397            uint8_t OCD_val_tmp,OCD_delay_tmp;
    398            //OCD_val = OCD_val/1000;
    399            OCD_val = (uint16_t)((uint32_t)5*OCD_val/1000);   //采样电阻阻值 5mR
    400            if(SCD_THREHOLD_VAL_SET >= 100000)
    401            { 
    402              if(OCD_val > 94)
    403              {
    404                OCD_val_tmp = 0x0F;  // 100 
    405              }
    406              else if(OCD_val > 89)
    407              {
    408                OCD_val_tmp = 0x0E;  //  94
    409              }
    410              else if(OCD_val > 83)
    411              {
    412                OCD_val_tmp = 0x0D;  //  89
    413              } 
    414              else if(OCD_val > 78)
    415              {
    416                OCD_val_tmp = 0x0C;  //  83
    417              }
    418              else if(OCD_val > 72)
    419              {
    420                OCD_val_tmp = 0x0B;  // 78 
    421              } 
    422              else if(OCD_val > 67)
    423              {
    424                OCD_val_tmp = 0x0A;  //  72
    425              }
    426              else if(OCD_val > 61)
    427              {
    428                OCD_val_tmp = 0x09;  //  67
    429              } 
    430              else if(OCD_val > 56)
    431              {
    432                OCD_val_tmp = 0x08;  //  61
    433              } 
    434              else if(OCD_val > 50)
    435              {
    436                OCD_val_tmp = 0x07;  //  56
    437              }
    438              else if(OCD_val > 44)
    439              {
    440                OCD_val_tmp = 0x06;  //  50
    441              }
    442              else if(OCD_val > 39)
    443              {
    444                OCD_val_tmp = 0x05;  //  44
    445              } 
    446              else if(OCD_val > 33)
    447              {
    448                OCD_val_tmp = 0x04;  //  39
    449              }
    450              else if(OCD_val > 28)
    451              {
    452                OCD_val_tmp = 0x03;  //  33
    453              } 
    454              else if(OCD_val > 22)
    455              {
    456                OCD_val_tmp = 0x02;  // 28 
    457              }
    458              else if(OCD_val > 17)
    459              {
    460                OCD_val_tmp = 0x01;  // 22mV
    461              } 
    462              else
    463              {
    464                OCD_val_tmp = 0x00;  // 17mV
    465              } 
    466            }
    467            else
    468            { 
    469              if(OCD_val > 47)
    470              {
    471                OCD_val_tmp = 0x0F;  //  50
    472              }
    473              else if(OCD_val > 44)
    474              {
    475                OCD_val_tmp = 0x0E;  //  47
    476              }
    477              else if(OCD_val > 42)
    478              {
    479                OCD_val_tmp = 0x0D;  //  44
    480              } 
    481              else if(OCD_val > 39)
    482              {
    483                OCD_val_tmp = 0x0C;  //  42
    484              }
    485              else if(OCD_val > 36)
    486              {
    487                OCD_val_tmp = 0x0B;  //  39
    488              } 
    489              else if(OCD_val > 33)
    490              {
    491                OCD_val_tmp = 0x0A;  //  36
    492              }
    493              else if(OCD_val > 31)
    494              {
    495                OCD_val_tmp = 0x09;  //  33
    496              } 
    497              else if(OCD_val > 28)
    498              {
    499                OCD_val_tmp = 0x08;  //  31
    500              } 
    501              else if(OCD_val > 25)
    502              {
    503                OCD_val_tmp = 0x07;  //  28
    504              }
    505              else if(OCD_val > 22)
    506              {
    507                OCD_val_tmp = 0x06;  //  25
    508              }
    509              else if(OCD_val > 19)
    510              {
    511                OCD_val_tmp = 0x05;  //  22
    512              } 
    513              else if(OCD_val > 17)
    514              {
    515                OCD_val_tmp = 0x04;  // 19 
    516              }
    517              else if(OCD_val > 14)
    518              {
    519                OCD_val_tmp = 0x03;  // 17 
    520              } 
    521              else if(OCD_val > 11)
    522              {
    523                OCD_val_tmp = 0x02;  // 14 
    524              }
    525              else if(OCD_val > 8)
    526              {
    527                OCD_val_tmp = 0x01;  //  11
    528              } 
    529              else
    530              {
    531                OCD_val_tmp = 0x00;  //  8
    532              } 
    533            } 
    534            //========================
    535            if(OCD_delay > 640)
    536            {
    537              OCD_delay_tmp = 0x07;  // 1280mS
    538            }
    539            else if(OCD_delay > 320)
    540            {
    541              OCD_delay_tmp = 0x06;  // 640mS
    542            }
    543            else if(OCD_delay > 160)
    544            {
    545              OCD_delay_tmp = 0x05;  // 320mS
    546            }
    547            else if(OCD_delay > 80)
    548            {
    549              OCD_delay_tmp = 0x04;  // 160mS
    550            }
    551            else if(OCD_delay > 40)
    552            {
    553              OCD_delay_tmp = 0x03;  // 80mS
    554            }
    555            else if(OCD_delay > 20)
    556            {
    557              OCD_delay_tmp = 0x02;  // 40mS
    558            }
    559            else if(OCD_delay > 8)
    560            {
    561              OCD_delay_tmp = 0x01;  // 20mS
    562            }
    563            else
    564            {
    565              OCD_delay_tmp = 0x00;  // 8mS
    566            }
    567            //== Protect page36
    568            OCD_delay_tmp = 0x06;   // 640mS
    569            //OCD_val_tmp = 0x07;     //  56mV/5mR = 11A 
    570            OCD_val_tmp = 0x0C;     //  83mV/5mR = 16.6A//0x00 
    571            //OCD_val_tmp = 0x00;     //  83mV/5mR = 16.6A// 
    572            PROTECT2_Last = (OCD_delay_tmp << 4) + OCD_val_tmp; //OCD
    573            I2C_Write(PROTECT2_ADDR,PROTECT2_Last); 
    574          }
    575          
    576          //==========================================================================
    577          //== OV_delay 为过充保护延时时间（s）、 UV_delay 为过放保护延时时间（s）
    578          void Afe_OV_UV_Delay_Set(uint8_t OV_delay, uint8_t UV_delay)
    579          {
    580            if(OV_delay > 4)
    581            {
    582              OV_delay = 0x30;  // 8s
    583            }
    584            else if(OV_delay > 2)
    585            {
    586              OV_delay = 0x20;  // 4s
    587            }
    588            else if(OV_delay > 1)
    589            {
    590              OV_delay = 0x10;  // 2s
    591            }
    592            else
    593            {
    594              OV_delay = 0x00;  // 1s
    595            }
    596            //==============================
    597            if(UV_delay > 8)
    598            {
    599              UV_delay = 0x30;
    600            }
    601            else if(UV_delay > 4)
    602            {
    603              UV_delay = 0x20;
    604            }
    605            else if(UV_delay > 2)
    606            {
    607              UV_delay = 0x10;
    608            }
    609            else
    610            {
    611              UV_delay = 0x00;
    612            }
    613            PROTECT3_Last = (UV_delay << 6) + (OV_delay <<4) ; //OV, UV delay time 4s
    614            I2C_Write(PROTECT3_ADDR,PROTECT3_Last);
    615          }
    616          
    617          //==========================================================================
    618          //== OV_val为过充保护电压值（mV）、 UV_val为过放保护电压值（mV）
    619          void Afe_OV_UV_Threshold_Set(uint16_t OV_val, uint16_t UV_val)
    620          { 
    621            //==OV UV threshold setting
    622            /*
    623            if(OV_val >= 4250)
    624            {
    625              OV_val = 4250;
    626            }
    627            if(UV_val <= 2000)
    628            {
    629              UV_val = 2000;
    630            } */
    631            OV_TRIP_Last = (uint8_t)(((uint32_t)1000 * (OV_val - ADCOffset_Val)/ADCGain_Val) >> 4);  
    632            if(0 == UV_val)
    633            {
    634              UV_TRIP_Last = 0;
    635            }
    636            else
    637            {
    638              UV_TRIP_Last = (uint8_t)(((uint32_t)1000 * (UV_val - ADCOffset_Val)/ADCGain_Val) >> 4);  
    639            }
    640            I2C_Write(UV_TRIP_ADDR,UV_TRIP_Last);
    641            I2C_Write(OV_TRIP_ADDR,OV_TRIP_Last);  
    642          }
    643          
    644          //==========================================================================
    645          void Afe_CC_Disable(void)
    646          { 
    647            // 电流采样结束标志位，写"1"清零 
    648            SYS_STAT_Last |= 0x80; 
    649            I2C_Write(SYS_STAT_ADDR,SYS_STAT_Last & 0xF0); 
    650            SYS_STAT_Last &= ~0x80;
    651              
    652            SYS_CTRL2.Bit.CC_EN = 0;       // 关闭电流连续采样模式
    653            SYS_CTRL2.Bit.CC_ONESHOT = 0;  // 开启电流单次采样模式
    654            SYS_CTRL2.Bit.DELAY_DIS = 0;   // 强制为0
    655            SYS_CTRL2_Last = SYS_CTRL2.Byte;
    656            
    657            //SYS_CTRL2_Last &= ~0x40;
    658            //SYS_CTRL2_Last |= 0x20;
    659            //I2C_Write(SYS_CTRL2_ADDR,SYS_CTRL2_Last); 
    660            I2C_Write(SYS_CTRL2_ADDR,SYS_CTRL2_Last);
    661            //SYS_CTRL2_Last = 0x20;
    662          }
    663          //==========================================================================
    664          void Afe_CC_1Shot_Set(void)
    665          { 
    666            // 电流采样结束标志位，写"1"清零
    667            SYS_STAT_Last |= 0x80; 
    668            I2C_Write(SYS_STAT_ADDR,SYS_STAT_Last & 0xF0);  
    669            SYS_STAT_Last &= ~0x80;
    670            
    671            SYS_CTRL2.Bit.CC_EN = 0;       // 关闭电流连续采样模式
    672            SYS_CTRL2.Bit.CC_ONESHOT = 1;  // 开启电流单次采样模式 CC_ONESHOT =1: Enable single CC reading (only valid if [CC_EN] = 0), and [CC_READY] = 0)
    673            SYS_CTRL2.Bit.DELAY_DIS = 0;   // 强制为0
    674            SYS_CTRL2_Last = SYS_CTRL2.Byte;
    675            
    676            //SYS_CTRL2_Last &= ~0x40;
    677            //SYS_CTRL2_Last |= 0x20;
    678            //I2C_Write(SYS_CTRL2_ADDR,SYS_CTRL2_Last); 
    679            
    680            I2C_Write(SYS_CTRL2_ADDR,SYS_CTRL2_Last);
    681            //SYS_CTRL2_Last = 0x20;
    682          }
    683          
    684          
    685          //==========================================================================
    686          void Afe_CC_AlwaysOn_Set(void)
    687          {
    688            SYS_CTRL2_Last |= 0x40;   // 开启电流连续采样模式
    689            SYS_CTRL2_Last &= ~0x20;
    690            I2C_Write(SYS_CTRL2_ADDR,SYS_CTRL2_Last); 
    691          }
    692          
    693          //==========================================================================
    694          /*-------------------------------------------------------------------------
    695                SYS_STAT (0x00)/RESET:0x00
    696                BIT      7      6           5             4       3   2    1     0
    697                NAME CC_READY  RSVD   DEVICE_XREADY   OVRD_ALERT  UV  OV  SCD   OCD
    698          -------------------------------------------------------------------------*/
    699          void Afe_Get_SysStatus(void)
    700          { 
    701              I2C_Read(SYS_STAT_ADDR,&SYS_STAT_Last); 
    702              SYS_STAT.Byte = SYS_STAT_Last;
    703              I2C_Read(SYS_CTRL1_ADDR,&SYS_CTRL1_Last); 
    704              SYS_CTRL1.Byte = SYS_CTRL1_Last;
    705              I2C_Read(SYS_CTRL2_ADDR,&SYS_CTRL2_Last); 
    706              SYS_CTRL2.Byte = SYS_CTRL2_Last;
    707              
    708             // I2C_Read(PROTECT1_ADDR,&PROTECT1_Last_Copy); 
    709             // I2C_Read(PROTECT2_ADDR,&PROTECT2_Last_Copy); 
    710             // I2C_Read(PROTECT3_ADDR,&PROTECT3_Last_Copy); 
    711          }
    712          /*---------------------------------------------------------
    713            打开充电MOS、打开放电MOS
    714          ---------------------------------------------------------*/
    715          void Afe_FET_ChgOn_DisOn(void)
    716          {
    717            SYS_CTRL2_Last |= 0x03;
    718            I2C_Write(SYS_CTRL2_ADDR,SYS_CTRL2_Last);
    719          }
    720          /*---------------------------------------------------------
    721            打开充电MOS、关闭放电MOS
    722          ---------------------------------------------------------*/
    723          void Afe_FET_ChgOn_DisOff(void)
    724          {
    725            SYS_CTRL2_Last |= 0x01;
    726            SYS_CTRL2_Last &= ~0x02;
    727            I2C_Write(SYS_CTRL2_ADDR,SYS_CTRL2_Last);
    728          }
    729          /*---------------------------------------------------------
    730            关闭充电MOS、打开放电MOS
    731          ---------------------------------------------------------*/
    732          void Afe_FET_ChgOff_DisOn(void)
    733          {
    734            SYS_CTRL2_Last &= ~0x01;
    735            SYS_CTRL2_Last |= 0x02;
    736            I2C_Write(SYS_CTRL2_ADDR,SYS_CTRL2_Last);
    737          }
    738          /*---------------------------------------------------------
    739            关闭充电MOS、关闭放电MOS
    740          ---------------------------------------------------------*/
    741          void Afe_FET_ChgOff_DisOff(void)
    742          {
    743            SYS_CTRL2_Last &= ~0x03;
    744            I2C_Write(SYS_CTRL2_ADDR,SYS_CTRL2_Last);
    745          }
    746          
    747          //==========================================================================
    748          /*
    749                SYS_STAT (0x00)/RESET:0x00
    750                BIT      7      6           5             4       3   2    1     0
    751                NAME CC_READY  RSVD   DEVICE_XREADY   OVRD_ALERT  UV  OV  SCD   OCD
    752            
    753                      CHG, DSG Response Under Various System Events
    754              EVENT                         [CHG_ON]              [DSG_ON]
    755              OV Fault                      Set to 0              ―
    756              UV Fault                      ―                    Set to 0
    757              OCD Fault                     ―                    Set to 0  
    758              SCD Fault                     ―                    Set to 0
    759              ALERT Override                Set to 0              Set to 0
    760              DEVICE_XREADY is set          Set to 0              Set to 0
    761              Enter SHIP mode from NORMAL   Set to 0              Set to 0
    762          */
    763          void Afe_FET_ChgDis_Cntrl(void)
    764          { 
    765            if(WorkMode == IDLE_MODE)
    766            { 
    767              Afe_FET_ChgOff_DisOff(); // 关闭充电MOS、关闭放电MOS 
    768            }
    769            else if(WorkMode == CHARGE_MODE)
    770            { 
    771              //ALERT_PIN_LOW();
    772              if(Bits_flag.Bit.ChgOv || Bits_flag.Bit.ChgTemp || Bits_flag.Bit.ChgCurOv || Bits_flag.Bit.AfeErr)
    773              {   
    774                Afe_FET_ChgOff_DisOff();  // 关闭充电MOS、关闭放电MOS 
    775              }
    776              else
    777              {  
    778                Afe_FET_ChgOn_DisOn();  // 开启充电MOS、开启放电MOS
    779              }
    780            }
    781            else if(WorkMode == DISCHARGE_MODE)
    782            { 
    783              if(Bits_flag.Bit.DisOv || Bits_flag.Bit.DisTemp || Bits_flag.Bit.DisCurOv || Bits_flag.Bit.AfeErr || Bits_flag.Bit.DisCurShort)
    784              {
    785                if(!Bits_flag.Bit.DisOv)
    786                {
    787                  ;//ALERT_PIN_HIGH();
    788                }
    789                Afe_FET_ChgOff_DisOff();  // 关闭充电MOS、关闭放电MOS 
    790              }
    791              else
    792              {  
    793                Afe_FET_ChgOn_DisOn();  // 开启充电MOS、开启放电MOS
    794              }
    795            }
    796          }
    797          
    798          #endif

   Section sizes:

     Function/Label          Bytes
     --------------          -----
     _A_PC_ODR                  1
     _A_PD_IDR                  1
     Afe_CellBalance_Enable    38
     Afe_CellBalance_Disable   71
     Afe_Get_Adc               54
     ChgDis_AbnormalCheck     160
     ?Subroutine6               8
     ?Subroutine5               6
     ?Subroutine3              14
     AfeErr_Cnt                 1
     Afe_EnterShipMode         34
     ?Subroutine2               8
     Afe_ADC_Disable           10
     Afe_ADC_Enable            10
     Afe_Temp_Disable          10
     Afe_Temp_Enable           10
     Afe_Get_GainOffset        72
     Afe_Device_Init          103
     Afe_SCD_Set               13
     Afe_OCD_Set               13
     Afe_OV_UV_Delay_Set       11
     Afe_OV_UV_Threshold_Set   74
     ?Subroutine4              29
     Afe_CC_Disable            11
     ?Subroutine1              23
     ?Subroutine0               3
     ??Subroutine7_0            8
     Afe_CC_1Shot_Set          13
     Afe_CC_AlwaysOn_Set       13
     Afe_Get_SysStatus         42
     Afe_FET_ChgOn_DisOn       11
     Afe_FET_ChgOn_DisOff      13
     Afe_FET_ChgOff_DisOn      13
     Afe_FET_ChgOff_DisOff     11
     Afe_FET_ChgDis_Cntrl      34

 
   1 byte  in section .near.bss
   2 bytes in section .near.noinit
 943 bytes in section .near_func.text
 
 943 bytes of CODE memory
   1 byte  of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: 2
