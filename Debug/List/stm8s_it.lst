###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.31.1.20058 [Evaluation] for STM830/Mar/2016  14:49:18 #
# Copyright 2010-2012 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\ProjectPath\GitPath\CH79_A0\sys\src\stm8s_it.c        #
#    Command line =  D:\ProjectPath\GitPath\CH79_A0\sys\src\stm8s_it.c -e     #
#                    -Ohz --debug --code_model small --data_model medium -o   #
#                    D:\ProjectPath\GitPath\CH79_A0\Debug\Obj\ --dlib_config  #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Evaluation\stm8\LIB\dlstm8smn.h" -lcN                    #
#                    D:\ProjectPath\GitPath\CH79_A0\Debug\List\ -I            #
#                    D:\ProjectPath\GitPath\CH79_A0/user/\ -I                 #
#                    D:\ProjectPath\GitPath\CH79_A0/user/src/\ -I             #
#                    D:\ProjectPath\GitPath\CH79_A0/user/inc/\ -I             #
#                    D:\ProjectPath\GitPath\CH79_A0/addon/\ -I                #
#                    D:\ProjectPath\GitPath\CH79_A0/addon/src/\ -I            #
#                    D:\ProjectPath\GitPath\CH79_A0/addon/inc/\ -I            #
#                    D:\ProjectPath\GitPath\CH79_A0/sys/\ -I                  #
#                    D:\ProjectPath\GitPath\CH79_A0/sys/inc/\ -I              #
#                    D:\ProjectPath\GitPath\CH79_A0/sys/src/\ -I              #
#                    D:\ProjectPath\GitPath\CH79_A0/lib/\ -I                  #
#                    D:\ProjectPath\GitPath\CH79_A0/lib/src/\ -I              #
#                    D:\ProjectPath\GitPath\CH79_A0/lib/inc/\ --vregs 16      #
#    List file    =  D:\ProjectPath\GitPath\CH79_A0\Debug\List\stm8s_it.lst   #
#    Object file  =  D:\ProjectPath\GitPath\CH79_A0\Debug\Obj\stm8s_it.o      #
#                                                                             #
#                                                                             #
###############################################################################

D:\ProjectPath\GitPath\CH79_A0\sys\src\stm8s_it.c
      1          /**
      2            ******************************************************************************
      3            * @file stm8s_it.c
      4            * @author STMicroelectronics - MCD Application Team
      5            * @version V2.0.0
      6            * @date 15-March-2011
      7            * @brief Main Interrupt Service Routines.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */ 
     21          
     22          /* Includes ------------------------------------------------------------------
     23          */
     24          #include "stm8s_it.h"
     25          #include "stm8s_tim4.h"
     26          #include "sysctrl.h"
     27          //#include "uart.h"
     28          #include "iostm8s003f3.h" 
     29          #include "user.h"
     30          #include "macro_def.h"
     31          
     32          #define   DIS_GIE    asm("sim")
     33          #define   EN_GIE     asm("rim")
     34           
     35            
     36          /** @addtogroup TIM2_OC_ActiveMode
     37            * @{
     38            */
     39          #ifdef _COSMIC_
     40          /**
     41            * @brief  Dummy interrupt routine
     42            * @param  None
     43            * @retval None
     44            */
     45          INTERRUPT_HANDLER(NonHandledInterrupt, 25)
     46          {
     47            /* In order to detect unexpected events during development,
     48               it is recommended to set a breakpoint on the following instruction.
     49            */
     50            nop();
     51          }
     52          #endif /*_COSMIC_*/
     53          
     54          /**
     55            * @brief  TRAP interrupt routine
     56            * @param  None
     57            * @retval None
     58            */
     59          INTERRUPT_HANDLER_TRAP(TRAP_IRQHandler)
     60          {
     61            /* In order to detect unexpected events during development,
     62               it is recommended to set a breakpoint on the following instruction.
     63            */
     64            nop();
     65          }
     66          /**
     67            * @brief  Top Level Interrupt routine
     68            * @param  None
     69            * @retval None
     70            */
     71          INTERRUPT_HANDLER(TLI_IRQHandler, 0)
     72          {
     73            /* In order to detect unexpected events during development,
     74               it is recommended to set a breakpoint on the following instruction.
     75            */
     76            nop();
     77          }
     78          
     79          /**
     80            * @brief  Auto Wake Up Interrupt routine
     81            * @param  None
     82            * @retval None
     83            */
     84          INTERRUPT_HANDLER(AWU_IRQHandler, 1)
     85          {
     86            /* In order to detect unexpected events during development,
     87               it is recommended to set a breakpoint on the following instruction.
     88            */
     89             nop();
     90             AWU->CSR |= 0x00;
     91          }
     92          
     93          /**
     94            * @brief  Clock Controller Interrupt routine
     95            * @param  None
     96            * @retval None
     97            */
     98          INTERRUPT_HANDLER(CLK_IRQHandler, 2)
     99          {
    100            /* In order to detect unexpected events during development,
    101               it is recommended to set a breakpoint on the following instruction.
    102            */
    103            nop();
    104          }
    105          
    106          /**
    107            * @brief  External Interrupt PORTA Interrupt routine
    108            * @param  None
    109            * @retval None
    110            */
    111          INTERRUPT_HANDLER(EXTI_PORTA_IRQHandler, 3)
    112          {
    113            /* In order to detect unexpected events during development,
    114               it is recommended to set a breakpoint on the following instruction.
    115            */ 
    116              nop();
    117             
    118          }
    119          
    120          /**
    121            * @brief  External Interrupt PORTB Interrupt routine
    122            * @param  None
    123            * @retval None
    124            */
    125          INTERRUPT_HANDLER(EXTI_PORTB_IRQHandler, 4)
    126          {
    127            /* In order to detect unexpected events during development,
    128               it is recommended to set a breakpoint on the following instruction.
    129            */
    130            nop(); 
    131            //GPIO_Init(GPIOB, GPIO_PIN_5, GPIO_MODE_IN_PU_NO_IT);        //KEY1
    132          }
    133          ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    134          /**
    135            * @brief  External Interrupt PORTC Interrupt routine
    136            * @param  None
    137            * @retval None
    138            */
    139          INTERRUPT_HANDLER(EXTI_PORTC_IRQHandler, 5)
    140          {
    141            /* In order to detect unexpected events during development,
    142               it is recommended to set a breakpoint on the following instruction.
    143            */
    144            nop();
    145            
    146          }
    147          
    148          /**
    149            * @brief  External Interrupt PORTD Interrupt routine
    150            * @param  None
    151            * @retval None
    152            */
    153          INTERRUPT_HANDLER(EXTI_PORTD_IRQHandler, 6)
    154          {
    155            /* In order to detect unexpected events during development,
    156               it is recommended to set a breakpoint on the following instruction.
    157            */
    158            nop();  
    159            /**/ 
    160            //LED1_ON();
    161            AWU->CSR |= 0x00;
    162            LowPower_MCU_Entry_Flag = 0;
    163            LowPower_Entry_Delay_t = 0;
    164          }
    165          
    166          /**
    167            * @brief  External Interrupt PORTE Interrupt routine
    168            * @param  None
    169            * @retval None
    170            */
    171          INTERRUPT_HANDLER(EXTI_PORTE_IRQHandler, 7)
    172          {
    173            /* In order to detect unexpected events during development,
    174               it is recommended to set a breakpoint on the following instruction.
    175            */
    176            nop();
    177          }
    178          #ifdef STM8S903
    179          /**
    180            * @brief  External Interrupt PORTF Interrupt routine
    181            * @param  None
    182            * @retval None
    183            */
    184           INTERRUPT_HANDLER(EXTI_PORTF_IRQHandler, 8)
    185          {
    186            /* In order to detect unexpected events during development,
    187               it is recommended to set a breakpoint on the following instruction.
    188            */
    189            nop();
    190          }
    191          #endif /*STM8S903*/
    192          
    193          #if defined (STM8S208) || defined (STM8AF52Ax)
    194          /**
    195            * @brief CAN RX Interrupt routine.
    196            * @param  None
    197            * @retval None
    198            */
    199           INTERRUPT_HANDLER(CAN_RX_IRQHandler, 8)
    200          {
    201            /* In order to detect unexpected events during development,
    202               it is recommended to set a breakpoint on the following instruction.
    203            */
    204          }
    205          
    206          /**
    207            * @brief  CAN TX Interrupt routine
    208            * @param  None
    209            * @retval None
    210            */
    211           INTERRUPT_HANDLER(CAN_TX_IRQHandler, 9)
    212          {
    213            /* In order to detect unexpected events during development,
    214               it is recommended to set a breakpoint on the following instruction.
    215            */
    216          }
    217          #endif /*STM8S208 || STM8AF52Ax */
    218          
    219          /**
    220            * @brief  SPI Interrupt routine
    221            * @param  None
    222            * @retval None
    223            */
    224          INTERRUPT_HANDLER(SPI_IRQHandler, 10)
    225          {
    226            /* In order to detect unexpected events during development,
    227               it is recommended to set a breakpoint on the following instruction.
    228            */
    229            nop();
    230          }
    231          
    232          /**
    233            * @brief  Timer1 Update/Overflow/Trigger/Break Interrupt routine
    234            * @param  None
    235            * @retval None
    236            */
    237          INTERRUPT_HANDLER(TIM1_UPD_OVF_TRG_BRK_IRQHandler, 11)
    238          {
    239            /* In order to detect unexpected events during development,
    240               it is recommended to set a breakpoint on the following instruction.
    241            */
    242            
    243          //FOR DEBUG  
    244          //1MS INTERRUPT FOR USER CODE 
    245            //TIM1_ClearFlag(TIM1_FLAG_UPDATE);  
    246            //TimerCnt();  
    247          //FOR DEBUG  
    248            nop();
    249          
    250            
    251          }
    252          
    253          /**
    254            * @brief  Timer1 Capture/Compare Interrupt routine
    255            * @param  None
    256            * @retval None
    257            */
    258          INTERRUPT_HANDLER(TIM1_CAP_COM_IRQHandler, 12)
    259          {
    260            /* In order to detect unexpected events during development,
    261               it is recommended to set a breakpoint on the following instruction.
    262            */
    263            nop();
    264          }
    265          
    266          #ifdef STM8S903
    267          /**
    268            * @brief  Timer5 Update/Overflow/Break/Trigger Interrupt routine
    269            * @param  None
    270            * @retval None
    271            */
    272           INTERRUPT_HANDLER(TIM5_UPD_OVF_BRK_TRG_IRQHandler, 13)
    273          {
    274            /* In order to detect unexpected events during development,
    275               it is recommended to set a breakpoint on the following instruction.
    276            */
    277            nop();
    278          }
    279          /**
    280            * @brief  Timer5 Capture/Compare Interrupt routine
    281            * @param  None
    282            * @retval None
    283            */
    284          
    285           INTERRUPT_HANDLER(TIM5_CAP_COM_IRQHandler, 14)
    286          {
    287            /* In order to detect unexpected events during development,
    288               it is recommended to set a breakpoint on the following instruction.
    289            */
    290            nop();
    291          }
    292          
    293          #else /*STM8S208, STM8S207, STM8S105 or STM8S103 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    294          /**
    295            * @brief  Timer2 Update/Overflow/Break Interrupt routine
    296            * @param  None
    297            * @retval None
    298            */
    299           INTERRUPT_HANDLER(TIM2_UPD_OVF_BRK_IRQHandler, 13)
    300          {
    301            /* In order to detect unexpected events during development,
    302               it is recommended to set a breakpoint on the following instruction.
    303            */ 
    304            static uint8_t cntr100ms = 0; 
    305            static uint16_t Init_Soc_Flag_Delay = 0; 
    306            nop();
    307            TIM2_SR1 &= ~0x01;
    308            if(ChgExchangeMode_Cnt < 255)
    309            {
    310              ChgExchangeMode_Cnt += 1;
    311            }
    312            if(DisExchangeMode_Cnt < 255)
    313            {
    314              DisExchangeMode_Cnt += 1;
    315            }
    316            if(IdleExchangeMode_Cnt < 255)
    317            {
    318              IdleExchangeMode_Cnt += 1;
    319            }
    320            //===================================SOC
    321            if(Init_Soc_Flag == 0)
    322            {
    323              if((Init_Soc_Flag_Delay++) >= 200)
    324              {
    325                Init_Soc_Flag = 1;
    326                Init_Soc_Flag_Delay = 0;
    327              }
    328            }
    329            //if(Init_Soc_Flag ==1)
    330            {
    331              SOCAhIntergrate(); 
    332              if((cntr100ms++) >= 10)
    333              {
    334                cntr100ms = 0; 
    335                if(Init_Soc_Flag == 1)
    336                {
    337                  SOCCalculate(); // 100ms tick
    338                }
    339              }
    340            } 
    341            //========================================
    342            if(1)//(IS_SIGNAL_IN())
    343            {
    344              if(LedFlash_t < MAX_UINT16_T_NUM)
    345              {
    346                LedFlash_t += 1;
    347              }
    348            }
    349            else
    350            {
    351              ;//LedFlash_t = 0;
    352            }
    353            //=======================================
    354            if(Temp_Volt_Sample_Cnt < MAX_UINT16_T_NUM)
    355            {  
    356              Temp_Volt_Sample_Cnt += 1;
    357            }
    358            if(Cell_Volt_Sample_Cnt < MAX_UINT16_T_NUM)
    359            {  
    360              Cell_Volt_Sample_Cnt += 1;
    361            }
    362            if(CC_Volt_Sample_Cnt < MAX_UINT16_T_NUM)
    363            {  
    364              CC_Volt_Sample_Cnt += 1;
    365            }
    366            //=======================================
    367            if(WorkMode == CHARGE_MODE)
    368            {
    369              if(Cell_Balance_Delay_t < MAX_UINT16_T_NUM)
    370              {
    371                Cell_Balance_Delay_t += 1;
    372              }
    373              if(ChgOv_t < MAX_UINT16_T_NUM)
    374              {
    375                ChgOv_t += 1;
    376              }
    377              if(ChgCurOv_t < MAX_UINT16_T_NUM)
    378              {
    379                ChgCurOv_t += 1;
    380              }
    381              if(Bits_flag.Bit.ChgCurOv )
    382              {
    383                if(ChgCurOv_Re_t < MAX_UINT16_T_NUM)
    384                {
    385                  ChgCurOv_Re_t += 1;
    386                }
    387              }
    388              else
    389              {
    390                ChgCurOv_Re_t = 0;
    391              }
    392            }
    393            else
    394            {
    395              //=======================================
    396              if(DisOv_t < MAX_UINT16_T_NUM)
    397              {
    398                DisOv_t += 1;
    399              }
    400              //=======================================
    401              /*
    402              if(Bits_flag.Bit.DisOv)
    403              {
    404                if( PowerOff_Delay_t < MAX_UINT16_T_NUM)
    405                {
    406                  PowerOff_Delay_t += 1;
    407                }
    408              }
    409              else
    410              {
    411                PowerOff_Delay_t = 0;
    412              } 
    413              */ 
    414              //=======================================
    415              if(WorkMode == DISCHARGE_MODE)
    416              { 
    417                if(Dis_First_Run_Flag == 0)
    418                {
    419                  if(Dis_First_Run_t < 200)
    420                  {
    421                    Dis_First_Run_t += 1;
    422                  }
    423                }
    424                else
    425                {
    426                  Dis_First_Run_t = 0;
    427                }
    428                //=======================================
    429                if(Bits_flag.Bit.DisCurShort)
    430                {
    431                  if( DisCurShort_Re_t < MAX_UINT16_T_NUM)
    432                  {
    433                    DisCurShort_Re_t += 1;
    434                  }
    435                }
    436                else
    437                {
    438                  DisCurShort_Re_t = 0;
    439                }
    440                //=======================================
    441                if(DisCurOv_t < MAX_UINT16_T_NUM)
    442                {
    443                  DisCurOv_t += 1;
    444                }
    445                //=======================================
    446                if(DisCurOv_t1 < MAX_UINT16_T_NUM)
    447                {
    448                  DisCurOv_t1 += 1;
    449                }
    450                //=======================================
    451                if(DisCurOv_t2 < MAX_UINT16_T_NUM)
    452                {
    453                  DisCurOv_t2 += 1;
    454                }
    455                //=======================================
    456                
    457                if(Bits_flag.Bit.DisCurOv)
    458                {
    459                  if( DisCurOv_Re_t < MAX_UINT16_T_NUM)
    460                  {
    461                    DisCurOv_Re_t += 1;
    462                  }
    463                }
    464                else
    465                {
    466                  DisCurOv_Re_t = 0;
    467                }
    468              } 
    469            }
    470            //=======================================
    471            if(Bits_flag.Bit.AfeErr)
    472            {
    473              if(DEVICE_XREADY_Re_t < MAX_UINT16_T_NUM)
    474              {
    475                DEVICE_XREADY_Re_t += 1;
    476              }
    477            }
    478            else
    479            {
    480              DEVICE_XREADY_Re_t = 0;
    481            }
    482            //=======================================
    483            if(WorkMode ==IDLE_MODE)
    484            {
    485              if(LowPower_Entry_Delay_t < MAX_UINT16_T_NUM)
    486              {
    487                LowPower_Entry_Delay_t += 1;
    488              }
    489              if(PowerOff_Delay_t < MAX_UINT16_T_NUM)
    490              {
    491                PowerOff_Delay_t += 1;
    492              }
    493            }
    494            /*
    495            else
    496            {
    497              PowerOff_Delay_t = 0;
    498              LowPower_MCU_Entry_Flag = 0;
    499              LowPower_Entry_Delay_t = 0;
    500            }
    501            */
    502          }
    503          
    504          /**
    505            * @brief  Timer2 Capture/Compare Interrupt routine
    506            * @param  None
    507            * @retval None
    508            */
    509           INTERRUPT_HANDLER(TIM2_CAP_COM_IRQHandler, 14)
    510          {
    511            /* In order to detect unexpected events during development,
    512               it is recommended to set a breakpoint on the following instruction.
    513            */
    514            nop();
    515          }
    516          #endif /*STM8S903*/
    517          
    518          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S105) || defined (STM8AF62Ax) ||\
    519              defined (STM8AF52Ax) || defined (STM8AF626x)
    520          /**
    521            * @brief Timer3 Update/Overflow/Break Interrupt routine.
    522            * @param  None
    523            * @retval None
    524            */
    525           INTERRUPT_HANDLER(TIM3_UPD_OVF_BRK_IRQHandler, 15)
    526          {
    527            /* In order to detect unexpected events during development,
    528               it is recommended to set a breakpoint on the following instruction.
    529            */
    530            nop();
    531          }
    532          
    533          /**
    534            * @brief  Timer3 Capture/Compare Interrupt routine
    535            * @param  None
    536            * @retval None
    537            */
    538           INTERRUPT_HANDLER(TIM3_CAP_COM_IRQHandler, 16)
    539          {
    540            /* In order to detect unexpected events during development,
    541               it is recommended to set a breakpoint on the following instruction.
    542            */
    543            nop();
    544          }
    545          #endif /*STM8S208, STM8S207 or STM8S105 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    546          
    547          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S103) || defined (STM8AF62Ax) ||\
    548              defined (STM8AF52Ax) || defined (STM8S903)
    549          /**
    550            * @brief  UART1 TX Interrupt routine
    551            * @param  None
    552            * @retval None
    553            */
    554           INTERRUPT_HANDLER(UART1_TX_IRQHandler, 17)
    555          {
    556            /* In order to detect unexpected events during development,
    557               it is recommended to set a breakpoint on the following instruction.
    558            */
    559            nop();
    560            //UART1_ClearFlag(UART1_FLAG_RXNE); 
    561            //if(*str!=0)
    562            //UART1_SendData8(*srt);
    563            //srt++;
    564          
    565            
    566          }
    567          
    568          /**
    569            * @brief  UART1 RX Interrupt routine
    570            * @param  None
    571            * @retval None
    572            */
    573           INTERRUPT_HANDLER(UART1_RX_IRQHandler, 18)
    574          {
    575            /* In order to detect unexpected events during development,
    576               it is recommended to set a breakpoint on the following instruction.
    577            */
    578            
    579            //UART1_ClearFlag(UART1_FLAG_RXNE); 
    580            //Uart1DataReceived();
    581            //UART1_SR &=0xD7;
    582            //UART_Revc = UART1_DR; 
    583          }
    584          #endif /*STM8S105*/
    585          
    586          /**
    587            * @brief  I2C Interrupt routine
    588            * @param  None
    589            * @retval None
    590            */
    591          INTERRUPT_HANDLER(I2C_IRQHandler, 19)
    592          {
    593            /* In order to detect unexpected events during development,
    594               it is recommended to set a breakpoint on the following instruction.
    595            */
    596            nop();
    597            I2C->SR1 = 0; 
    598          }
    599          
    600          #if defined (STM8S105) || defined (STM8AF626x)
    601          /**
    602            * @brief  UART2 TX interrupt routine.
    603            * @param  None
    604            * @retval None
    605            */
    606           INTERRUPT_HANDLER(UART2_TX_IRQHandler, 20)
    607          {
    608              /* In order to detect unexpected events during development,
    609                 it is recommended to set a breakpoint on the following instruction.
    610              */
    611            nop();
    612            }
    613          
    614          /**
    615            * @brief  UART2 RX interrupt routine.
    616            * @param  None
    617            * @retval None
    618            */
    619           INTERRUPT_HANDLER(UART2_RX_IRQHandler, 21)
    620          {
    621              /* In order to detect unexpected events during development,
    622                 it is recommended to set a breakpoint on the following instruction.
    623              */
    624            nop();
    625            }
    626          #endif /* STM8S105*/
    627          
    628          #if defined(STM8S207) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    629          /**
    630            * @brief  UART3 TX interrupt routine.
    631            * @param  None
    632            * @retval None
    633            */
    634           INTERRUPT_HANDLER(UART3_TX_IRQHandler, 20)
    635          {
    636              /* In order to detect unexpected events during development,
    637                 it is recommended to set a breakpoint on the following instruction.
    638              */
    639            nop();
    640            }
    641          
    642          /**
    643            * @brief  UART3 RX interrupt routine.
    644            * @param  None
    645            * @retval None
    646            */
    647           INTERRUPT_HANDLER(UART3_RX_IRQHandler, 21)
    648          {
    649              /* In order to detect unexpected events during development,
    650                 it is recommended to set a breakpoint on the following instruction.
    651              */
    652            nop();
    653            }
    654          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    655          
    656          #if defined(STM8S207) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    657          /**
    658            * @brief  ADC2 interrupt routine.
    659            * @param  None
    660            * @retval None
    661            */
    662           INTERRUPT_HANDLER(ADC2_IRQHandler, 22)
    663          {
    664          
    665              /* In order to detect unexpected events during development,
    666                 it is recommended to set a breakpoint on the following instruction.
    667              */
    668            nop();
    669              return;
    670          
    671          }
    672          #else /*STM8S105, STM8S103 or STM8S903 or STM8AF626x */
    673          /**
    674            * @brief  ADC1 interrupt routine.
    675            * @param  None
    676            * @retval None
    677            */
    678           INTERRUPT_HANDLER(ADC1_IRQHandler, 22)
    679          {
    680          
    681              /* In order to detect unexpected events during development,
    682                 it is recommended to set a breakpoint on the following instruction.
    683              */
    684            nop();
    685              return;
    686          
    687          }
    688          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    689          
    690          #ifdef STM8S903
    691          /**
    692            * @brief  Timer6 Update/Overflow/Trigger Interrupt routine
    693            * @param  None
    694            * @retval None
    695            */
    696          INTERRUPT_HANDLER(TIM6_UPD_OVF_TRG_IRQHandler, 23)
    697          {
    698            /* In order to detect unexpected events during development,
    699               it is recommended to set a breakpoint on the following instruction.
    700            */
    701          //200uS INTERRUPT FOR USER CODE 
    702           TIM6_ClearFlag(TIM6_FLAG_UPDATE);
    703          
    704            nop();
    705           //TIM6_SR1 = 0x00;
    706          //--------------------test only
    707          
    708           //GPIO_WriteReverse(GPIOD, GPIO_PIN_2 | GPIO_PIN_3 |GPIO_PIN_4 |GPIO_PIN_5);
    709          
    710            
    711              
    712            }  
    713          #else /*STM8S208, STM8S207, STM8S105 or STM8S103 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    714          /**
    715            * @brief  Timer4 Update/Overflow Interrupt routine
    716            * @param  None
    717            * @retval None
    718            */
    719           INTERRUPT_HANDLER(TIM4_UPD_OVF_IRQHandler, 23)
    720          { 
    721            
    722             TIM4->SR1 &= ~0x01;
    723             //-------------------extern unsigned int DisLedW_t,DisLedW_tt; 
    724             if(Delay_time_t > 0)
    725             {
    726               Delay_time_t -= 1;
    727             }
    728             
    729             //==================================== 
    730          }
    731          #endif /*STM8S903*/
    732          
    733          /**
    734            * @brief  Eeprom EEC Interrupt routine
    735            * @param  None
    736            * @retval None
    737            */
    738          INTERRUPT_HANDLER(EEPROM_EEC_IRQHandler, 24)
    739          {
    740            /* In order to detect unexpected events during development,
    741               it is recommended to set a breakpoint on the following instruction.
    742            */
    743          }
    744          
    745          /**
    746            * @}
    747            */
    748          
    749          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     _A_TIM2_SR1                       1
     TRAP_IRQHandler                   2
     TLI_IRQHandler                    2
     AWU_IRQHandler                    8
     CLK_IRQHandler                    2
     EXTI_PORTA_IRQHandler             2
     EXTI_PORTB_IRQHandler             2
     EXTI_PORTC_IRQHandler             2
     EXTI_PORTD_IRQHandler            16
     EXTI_PORTE_IRQHandler             2
     SPI_IRQHandler                    2
     TIM1_UPD_OVF_TRG_BRK_IRQHandler
                                       2
     TIM1_CAP_COM_IRQHandler           2
     TIM2_UPD_OVF_BRK_IRQHandler     393
     cntr100ms                         1
     Init_Soc_Flag_Delay               2
     TIM2_CAP_COM_IRQHandler           2
     UART1_TX_IRQHandler               2
     UART1_RX_IRQHandler               1
     I2C_IRQHandler                    6
     ADC1_IRQHandler                   2
     TIM4_UPD_OVF_IRQHandler          14
     EEPROM_EEC_IRQHandler             1

 
   3 bytes in section .near.bss
   1 byte  in section .near.noinit
 465 bytes in section .near_func.text
 
 465 bytes of CODE memory
   3 bytes of DATA memory (+ 1 byte shared)

Errors: none
Warnings: none
