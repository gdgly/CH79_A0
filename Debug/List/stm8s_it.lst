###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.31.1.20058 [Evaluation] for STM830/Mar/2016  20:01:43 #
# Copyright 2010-2012 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\ProjectPath\GitPath\CH79_A0\sys\src\stm8s_it.c        #
#    Command line =  D:\ProjectPath\GitPath\CH79_A0\sys\src\stm8s_it.c -e     #
#                    -Ohz --debug --code_model small --data_model medium -o   #
#                    D:\ProjectPath\GitPath\CH79_A0\Debug\Obj\ --dlib_config  #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Evaluation\stm8\LIB\dlstm8smn.h" -lcN                    #
#                    D:\ProjectPath\GitPath\CH79_A0\Debug\List\ -I            #
#                    D:\ProjectPath\GitPath\CH79_A0/user/\ -I                 #
#                    D:\ProjectPath\GitPath\CH79_A0/user/src/\ -I             #
#                    D:\ProjectPath\GitPath\CH79_A0/user/inc/\ -I             #
#                    D:\ProjectPath\GitPath\CH79_A0/addon/\ -I                #
#                    D:\ProjectPath\GitPath\CH79_A0/addon/src/\ -I            #
#                    D:\ProjectPath\GitPath\CH79_A0/addon/inc/\ -I            #
#                    D:\ProjectPath\GitPath\CH79_A0/sys/\ -I                  #
#                    D:\ProjectPath\GitPath\CH79_A0/sys/inc/\ -I              #
#                    D:\ProjectPath\GitPath\CH79_A0/sys/src/\ -I              #
#                    D:\ProjectPath\GitPath\CH79_A0/lib/\ -I                  #
#                    D:\ProjectPath\GitPath\CH79_A0/lib/src/\ -I              #
#                    D:\ProjectPath\GitPath\CH79_A0/lib/inc/\ --vregs 16      #
#    List file    =  D:\ProjectPath\GitPath\CH79_A0\Debug\List\stm8s_it.lst   #
#    Object file  =  D:\ProjectPath\GitPath\CH79_A0\Debug\Obj\stm8s_it.o      #
#                                                                             #
#                                                                             #
###############################################################################

D:\ProjectPath\GitPath\CH79_A0\sys\src\stm8s_it.c
      1          /**
      2            ******************************************************************************
      3            * @file stm8s_it.c
      4            * @author STMicroelectronics - MCD Application Team
      5            * @version V2.0.0
      6            * @date 15-March-2011
      7            * @brief Main Interrupt Service Routines.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */ 
     21          
     22          /* Includes ------------------------------------------------------------------
     23          */
     24          #include "stm8s_it.h"
     25          #include "stm8s_tim4.h"
     26          #include "sysctrl.h"
     27          //#include "uart.h"
     28          #include "iostm8s003f3.h" 
     29          #include "user.h"
     30          #include "macro_def.h"
     31          
     32          #define   DIS_GIE    asm("sim")
     33          #define   EN_GIE     asm("rim")
     34           
     35            
     36          /** @addtogroup TIM2_OC_ActiveMode
     37            * @{
     38            */
     39          #ifdef _COSMIC_
     40          /**
     41            * @brief  Dummy interrupt routine
     42            * @param  None
     43            * @retval None
     44            */
     45          INTERRUPT_HANDLER(NonHandledInterrupt, 25)
     46          {
     47            /* In order to detect unexpected events during development,
     48               it is recommended to set a breakpoint on the following instruction.
     49            */
     50            nop();
     51          }
     52          #endif /*_COSMIC_*/
     53          
     54          /**
     55            * @brief  TRAP interrupt routine
     56            * @param  None
     57            * @retval None
     58            */
     59          INTERRUPT_HANDLER_TRAP(TRAP_IRQHandler)
     60          {
     61            /* In order to detect unexpected events during development,
     62               it is recommended to set a breakpoint on the following instruction.
     63            */
     64            nop();
     65          }
     66          /**
     67            * @brief  Top Level Interrupt routine
     68            * @param  None
     69            * @retval None
     70            */
     71          INTERRUPT_HANDLER(TLI_IRQHandler, 0)
     72          {
     73            /* In order to detect unexpected events during development,
     74               it is recommended to set a breakpoint on the following instruction.
     75            */
     76            nop();
     77          }
     78          
     79          /**
     80            * @brief  Auto Wake Up Interrupt routine
     81            * @param  None
     82            * @retval None
     83            */
     84          INTERRUPT_HANDLER(AWU_IRQHandler, 1)
     85          {
     86            /* In order to detect unexpected events during development,
     87               it is recommended to set a breakpoint on the following instruction.
     88            */
     89             nop();
     90             AWU->CSR |= 0x00;
     91          }
     92          
     93          /**
     94            * @brief  Clock Controller Interrupt routine
     95            * @param  None
     96            * @retval None
     97            */
     98          INTERRUPT_HANDLER(CLK_IRQHandler, 2)
     99          {
    100            /* In order to detect unexpected events during development,
    101               it is recommended to set a breakpoint on the following instruction.
    102            */
    103            nop();
    104          }
    105          
    106          /**
    107            * @brief  External Interrupt PORTA Interrupt routine
    108            * @param  None
    109            * @retval None
    110            */
    111          INTERRUPT_HANDLER(EXTI_PORTA_IRQHandler, 3)
    112          {
    113            /* In order to detect unexpected events during development,
    114               it is recommended to set a breakpoint on the following instruction.
    115            */ 
    116              nop();
    117             
    118          }
    119          
    120          /**
    121            * @brief  External Interrupt PORTB Interrupt routine
    122            * @param  None
    123            * @retval None
    124            */
    125          INTERRUPT_HANDLER(EXTI_PORTB_IRQHandler, 4)
    126          {
    127            /* In order to detect unexpected events during development,
    128               it is recommended to set a breakpoint on the following instruction.
    129            */
    130            nop(); 
    131            //GPIO_Init(GPIOB, GPIO_PIN_5, GPIO_MODE_IN_PU_NO_IT);        //KEY1
    132          }
    133          ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    134          /**
    135            * @brief  External Interrupt PORTC Interrupt routine
    136            * @param  None
    137            * @retval None
    138            */
    139          INTERRUPT_HANDLER(EXTI_PORTC_IRQHandler, 5)
    140          {
    141            /* In order to detect unexpected events during development,
    142               it is recommended to set a breakpoint on the following instruction.
    143            */
    144            nop();
    145            
    146          }
    147          
    148          /**
    149            * @brief  External Interrupt PORTD Interrupt routine
    150            * @param  None
    151            * @retval None
    152            */
    153          INTERRUPT_HANDLER(EXTI_PORTD_IRQHandler, 6)
    154          {
    155            /* In order to detect unexpected events during development,
    156               it is recommended to set a breakpoint on the following instruction.
    157            */
    158            nop();  
    159            /**/ 
    160            //LED1_ON();
    161            AWU->CSR |= 0x00;
    162            LowPower_MCU_Entry_Flag = 0;
    163            LowPower_Entry_Delay_t = 0;
    164          }
    165          
    166          /**
    167            * @brief  External Interrupt PORTE Interrupt routine
    168            * @param  None
    169            * @retval None
    170            */
    171          INTERRUPT_HANDLER(EXTI_PORTE_IRQHandler, 7)
    172          {
    173            /* In order to detect unexpected events during development,
    174               it is recommended to set a breakpoint on the following instruction.
    175            */
    176            nop();
    177          }
    178          #ifdef STM8S903
    179          /**
    180            * @brief  External Interrupt PORTF Interrupt routine
    181            * @param  None
    182            * @retval None
    183            */
    184           INTERRUPT_HANDLER(EXTI_PORTF_IRQHandler, 8)
    185          {
    186            /* In order to detect unexpected events during development,
    187               it is recommended to set a breakpoint on the following instruction.
    188            */
    189            nop();
    190          }
    191          #endif /*STM8S903*/
    192          
    193          #if defined (STM8S208) || defined (STM8AF52Ax)
    194          /**
    195            * @brief CAN RX Interrupt routine.
    196            * @param  None
    197            * @retval None
    198            */
    199           INTERRUPT_HANDLER(CAN_RX_IRQHandler, 8)
    200          {
    201            /* In order to detect unexpected events during development,
    202               it is recommended to set a breakpoint on the following instruction.
    203            */
    204          }
    205          
    206          /**
    207            * @brief  CAN TX Interrupt routine
    208            * @param  None
    209            * @retval None
    210            */
    211           INTERRUPT_HANDLER(CAN_TX_IRQHandler, 9)
    212          {
    213            /* In order to detect unexpected events during development,
    214               it is recommended to set a breakpoint on the following instruction.
    215            */
    216          }
    217          #endif /*STM8S208 || STM8AF52Ax */
    218          
    219          /**
    220            * @brief  SPI Interrupt routine
    221            * @param  None
    222            * @retval None
    223            */
    224          INTERRUPT_HANDLER(SPI_IRQHandler, 10)
    225          {
    226            /* In order to detect unexpected events during development,
    227               it is recommended to set a breakpoint on the following instruction.
    228            */
    229            nop();
    230          }
    231          
    232          /**
    233            * @brief  Timer1 Update/Overflow/Trigger/Break Interrupt routine
    234            * @param  None
    235            * @retval None
    236            */
    237          INTERRUPT_HANDLER(TIM1_UPD_OVF_TRG_BRK_IRQHandler, 11)
    238          {
    239            /* In order to detect unexpected events during development,
    240               it is recommended to set a breakpoint on the following instruction.
    241            */
    242            
    243          //FOR DEBUG  
    244          //1MS INTERRUPT FOR USER CODE 
    245            //TIM1_ClearFlag(TIM1_FLAG_UPDATE);  
    246            //TimerCnt();  
    247          //FOR DEBUG  
    248            nop();
    249          
    250            
    251          }
    252          
    253          /**
    254            * @brief  Timer1 Capture/Compare Interrupt routine
    255            * @param  None
    256            * @retval None
    257            */
    258          INTERRUPT_HANDLER(TIM1_CAP_COM_IRQHandler, 12)
    259          {
    260            /* In order to detect unexpected events during development,
    261               it is recommended to set a breakpoint on the following instruction.
    262            */
    263            nop();
    264          }
    265          
    266          #ifdef STM8S903
    267          /**
    268            * @brief  Timer5 Update/Overflow/Break/Trigger Interrupt routine
    269            * @param  None
    270            * @retval None
    271            */
    272           INTERRUPT_HANDLER(TIM5_UPD_OVF_BRK_TRG_IRQHandler, 13)
    273          {
    274            /* In order to detect unexpected events during development,
    275               it is recommended to set a breakpoint on the following instruction.
    276            */
    277            nop();
    278          }
    279          /**
    280            * @brief  Timer5 Capture/Compare Interrupt routine
    281            * @param  None
    282            * @retval None
    283            */
    284          
    285           INTERRUPT_HANDLER(TIM5_CAP_COM_IRQHandler, 14)
    286          {
    287            /* In order to detect unexpected events during development,
    288               it is recommended to set a breakpoint on the following instruction.
    289            */
    290            nop();
    291          }
    292          
    293          #else /*STM8S208, STM8S207, STM8S105 or STM8S103 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    294          /**
    295            * @brief  Timer2 Update/Overflow/Break Interrupt routine
    296            * @param  None
    297            * @retval None
    298            */
    299           INTERRUPT_HANDLER(TIM2_UPD_OVF_BRK_IRQHandler, 13)
    300          {
    301            /* In order to detect unexpected events during development,
    302               it is recommended to set a breakpoint on the following instruction.
    303            */ 
    304            static uint8_t cntr100ms = 0; 
    305            static uint16_t Init_Soc_Flag_Delay = 0; 
    306            nop();
    307            TIM2_SR1 &= ~0x01;
    308            if(ChgExchangeMode_Cnt < 255)
    309            {
    310              ChgExchangeMode_Cnt += 1;
    311            }
    312            if(DisExchangeMode_Cnt < 255)
    313            {
    314              DisExchangeMode_Cnt += 1;
    315            }
    316            if(IdleExchangeMode_Cnt < 255)
    317            {
    318              IdleExchangeMode_Cnt += 1;
    319            }
    320            //===================================SOC
    321            if(Init_Soc_Flag == 0)
    322            {
    323              if((Init_Soc_Flag_Delay++) >= 200)
    324              {
    325                Init_Soc_Flag = 1;
    326                Init_Soc_Flag_Delay = 0;
    327              }
    328            }
    329            //if(Init_Soc_Flag ==1)
    330            {
    331              SOCAhIntergrate(); 
    332              if((cntr100ms++) >= 10)
    333              {
    334                cntr100ms = 0; 
    335                if(Init_Soc_Flag == 1)
    336                {
    337                  SOCCalculate(); // 100ms tick
    338                }
    339              }
    340            } 
    341            //======================================== 
    342            if(LedFlash_t < MAX_UINT16_T_NUM)
    343            {
    344              LedFlash_t += 1;
    345            } 
    346            //=======================================
    347            if(Temp_Volt_Sample_Cnt < MAX_UINT16_T_NUM)
    348            {  
    349              Temp_Volt_Sample_Cnt += 1;
    350            }
    351            if(Cell_Volt_Sample_Cnt < MAX_UINT16_T_NUM)
    352            {  
    353              Cell_Volt_Sample_Cnt += 1;
    354            }
    355            if(CC_Volt_Sample_Cnt < MAX_UINT16_T_NUM)
    356            {  
    357              CC_Volt_Sample_Cnt += 1;
    358            }
    359            //=======================================
    360            if(WorkMode == CHARGE_MODE)
    361            {
    362              if(Cell_Balance_Delay_t < MAX_UINT16_T_NUM)
    363              {
    364                Cell_Balance_Delay_t += 1;
    365              }
    366              if(ChgOv_t < MAX_UINT16_T_NUM)
    367              {
    368                ChgOv_t += 1;
    369              }
    370              if(ChgCurOv_t < MAX_UINT16_T_NUM)
    371              {
    372                ChgCurOv_t += 1;
    373              }
    374              if(Bits_flag.Bit.ChgCurOv )
    375              {
    376                if(ChgCurOv_Re_t < MAX_UINT16_T_NUM)
    377                {
    378                  ChgCurOv_Re_t += 1;
    379                }
    380              }
    381              else
    382              {
    383                ChgCurOv_Re_t = 0;
    384              }
    385            }
    386            else
    387            {
    388              //=======================================
    389              if(DisOv_t < MAX_UINT16_T_NUM)
    390              {
    391                DisOv_t += 1;
    392              }
    393              //=======================================
    394              /*
    395              if(Bits_flag.Bit.DisOv)
    396              {
    397                if( PowerOff_Delay_t < MAX_UINT16_T_NUM)
    398                {
    399                  PowerOff_Delay_t += 1;
    400                }
    401              }
    402              else
    403              {
    404                PowerOff_Delay_t = 0;
    405              } 
    406              */ 
    407              //=======================================
    408              if(WorkMode == DISCHARGE_MODE)
    409              { 
    410                if(Dis_First_Run_Flag == 0)
    411                {
    412                  if(Dis_First_Run_t < 200)
    413                  {
    414                    Dis_First_Run_t += 1;
    415                  }
    416                }
    417                else
    418                {
    419                  Dis_First_Run_t = 0;
    420                }
    421                //=======================================
    422                if(Bits_flag.Bit.DisCurShort)
    423                {
    424                  if( DisCurShort_Re_t < MAX_UINT16_T_NUM)
    425                  {
    426                    DisCurShort_Re_t += 1;
    427                  }
    428                }
    429                else
    430                {
    431                  DisCurShort_Re_t = 0;
    432                }
    433                //=======================================
    434                if(DisCurOv_t < MAX_UINT16_T_NUM)
    435                {
    436                  DisCurOv_t += 1;
    437                }
    438                //=======================================
    439                if(DisCurOv_t1 < MAX_UINT16_T_NUM)
    440                {
    441                  DisCurOv_t1 += 1;
    442                }
    443                //=======================================
    444                if(DisCurOv_t2 < MAX_UINT16_T_NUM)
    445                {
    446                  DisCurOv_t2 += 1;
    447                }
    448                //=======================================
    449                
    450                if(Bits_flag.Bit.DisCurOv)
    451                {
    452                  if( DisCurOv_Re_t < MAX_UINT16_T_NUM)
    453                  {
    454                    DisCurOv_Re_t += 1;
    455                  }
    456                }
    457                else
    458                {
    459                  DisCurOv_Re_t = 0;
    460                }
    461              } 
    462            }
    463            //=======================================
    464            if(Bits_flag.Bit.AfeErr)
    465            {
    466              if(DEVICE_XREADY_Re_t < MAX_UINT16_T_NUM)
    467              {
    468                DEVICE_XREADY_Re_t += 1;
    469              }
    470            }
    471            else
    472            {
    473              DEVICE_XREADY_Re_t = 0;
    474            }
    475            //=======================================
    476            if(WorkMode ==IDLE_MODE)
    477            {
    478              if(LowPower_Entry_Delay_t < MAX_UINT16_T_NUM)
    479              {
    480                LowPower_Entry_Delay_t += 1;
    481              }
    482              if(PowerOff_Delay_t < MAX_UINT16_T_NUM)
    483              {
    484                PowerOff_Delay_t += 1;
    485              }
    486            }
    487            /*
    488            else
    489            {
    490              PowerOff_Delay_t = 0;
    491              LowPower_MCU_Entry_Flag = 0;
    492              LowPower_Entry_Delay_t = 0;
    493            }
    494            */
    495          }
    496          
    497          /**
    498            * @brief  Timer2 Capture/Compare Interrupt routine
    499            * @param  None
    500            * @retval None
    501            */
    502           INTERRUPT_HANDLER(TIM2_CAP_COM_IRQHandler, 14)
    503          {
    504            /* In order to detect unexpected events during development,
    505               it is recommended to set a breakpoint on the following instruction.
    506            */
    507            nop();
    508          }
    509          #endif /*STM8S903*/
    510          
    511          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S105) || defined (STM8AF62Ax) ||\
    512              defined (STM8AF52Ax) || defined (STM8AF626x)
    513          /**
    514            * @brief Timer3 Update/Overflow/Break Interrupt routine.
    515            * @param  None
    516            * @retval None
    517            */
    518           INTERRUPT_HANDLER(TIM3_UPD_OVF_BRK_IRQHandler, 15)
    519          {
    520            /* In order to detect unexpected events during development,
    521               it is recommended to set a breakpoint on the following instruction.
    522            */
    523            nop();
    524          }
    525          
    526          /**
    527            * @brief  Timer3 Capture/Compare Interrupt routine
    528            * @param  None
    529            * @retval None
    530            */
    531           INTERRUPT_HANDLER(TIM3_CAP_COM_IRQHandler, 16)
    532          {
    533            /* In order to detect unexpected events during development,
    534               it is recommended to set a breakpoint on the following instruction.
    535            */
    536            nop();
    537          }
    538          #endif /*STM8S208, STM8S207 or STM8S105 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    539          
    540          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S103) || defined (STM8AF62Ax) ||\
    541              defined (STM8AF52Ax) || defined (STM8S903)
    542          /**
    543            * @brief  UART1 TX Interrupt routine
    544            * @param  None
    545            * @retval None
    546            */
    547           INTERRUPT_HANDLER(UART1_TX_IRQHandler, 17)
    548          {
    549            /* In order to detect unexpected events during development,
    550               it is recommended to set a breakpoint on the following instruction.
    551            */
    552            nop();
    553            //UART1_ClearFlag(UART1_FLAG_RXNE); 
    554            //if(*str!=0)
    555            //UART1_SendData8(*srt);
    556            //srt++;
    557          
    558            
    559          }
    560          
    561          /**
    562            * @brief  UART1 RX Interrupt routine
    563            * @param  None
    564            * @retval None
    565            */
    566           INTERRUPT_HANDLER(UART1_RX_IRQHandler, 18)
    567          {
    568            /* In order to detect unexpected events during development,
    569               it is recommended to set a breakpoint on the following instruction.
    570            */
    571            
    572            //UART1_ClearFlag(UART1_FLAG_RXNE); 
    573            //Uart1DataReceived();
    574            //UART1_SR &=0xD7;
    575            //UART_Revc = UART1_DR; 
    576          }
    577          #endif /*STM8S105*/
    578          
    579          /**
    580            * @brief  I2C Interrupt routine
    581            * @param  None
    582            * @retval None
    583            */
    584          INTERRUPT_HANDLER(I2C_IRQHandler, 19)
    585          {
    586            /* In order to detect unexpected events during development,
    587               it is recommended to set a breakpoint on the following instruction.
    588            */
    589            nop();
    590            I2C->SR1 = 0; 
    591          }
    592          
    593          #if defined (STM8S105) || defined (STM8AF626x)
    594          /**
    595            * @brief  UART2 TX interrupt routine.
    596            * @param  None
    597            * @retval None
    598            */
    599           INTERRUPT_HANDLER(UART2_TX_IRQHandler, 20)
    600          {
    601              /* In order to detect unexpected events during development,
    602                 it is recommended to set a breakpoint on the following instruction.
    603              */
    604            nop();
    605            }
    606          
    607          /**
    608            * @brief  UART2 RX interrupt routine.
    609            * @param  None
    610            * @retval None
    611            */
    612           INTERRUPT_HANDLER(UART2_RX_IRQHandler, 21)
    613          {
    614              /* In order to detect unexpected events during development,
    615                 it is recommended to set a breakpoint on the following instruction.
    616              */
    617            nop();
    618            }
    619          #endif /* STM8S105*/
    620          
    621          #if defined(STM8S207) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    622          /**
    623            * @brief  UART3 TX interrupt routine.
    624            * @param  None
    625            * @retval None
    626            */
    627           INTERRUPT_HANDLER(UART3_TX_IRQHandler, 20)
    628          {
    629              /* In order to detect unexpected events during development,
    630                 it is recommended to set a breakpoint on the following instruction.
    631              */
    632            nop();
    633            }
    634          
    635          /**
    636            * @brief  UART3 RX interrupt routine.
    637            * @param  None
    638            * @retval None
    639            */
    640           INTERRUPT_HANDLER(UART3_RX_IRQHandler, 21)
    641          {
    642              /* In order to detect unexpected events during development,
    643                 it is recommended to set a breakpoint on the following instruction.
    644              */
    645            nop();
    646            }
    647          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    648          
    649          #if defined(STM8S207) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    650          /**
    651            * @brief  ADC2 interrupt routine.
    652            * @param  None
    653            * @retval None
    654            */
    655           INTERRUPT_HANDLER(ADC2_IRQHandler, 22)
    656          {
    657          
    658              /* In order to detect unexpected events during development,
    659                 it is recommended to set a breakpoint on the following instruction.
    660              */
    661            nop();
    662              return;
    663          
    664          }
    665          #else /*STM8S105, STM8S103 or STM8S903 or STM8AF626x */
    666          /**
    667            * @brief  ADC1 interrupt routine.
    668            * @param  None
    669            * @retval None
    670            */
    671           INTERRUPT_HANDLER(ADC1_IRQHandler, 22)
    672          {
    673          
    674              /* In order to detect unexpected events during development,
    675                 it is recommended to set a breakpoint on the following instruction.
    676              */
    677            nop();
    678              return;
    679          
    680          }
    681          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    682          
    683          #ifdef STM8S903
    684          /**
    685            * @brief  Timer6 Update/Overflow/Trigger Interrupt routine
    686            * @param  None
    687            * @retval None
    688            */
    689          INTERRUPT_HANDLER(TIM6_UPD_OVF_TRG_IRQHandler, 23)
    690          {
    691            /* In order to detect unexpected events during development,
    692               it is recommended to set a breakpoint on the following instruction.
    693            */
    694          //200uS INTERRUPT FOR USER CODE 
    695           TIM6_ClearFlag(TIM6_FLAG_UPDATE);
    696          
    697            nop();
    698           //TIM6_SR1 = 0x00;
    699          //--------------------test only
    700          
    701           //GPIO_WriteReverse(GPIOD, GPIO_PIN_2 | GPIO_PIN_3 |GPIO_PIN_4 |GPIO_PIN_5);
    702          
    703            
    704              
    705            }  
    706          #else /*STM8S208, STM8S207, STM8S105 or STM8S103 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    707          /**
    708            * @brief  Timer4 Update/Overflow Interrupt routine
    709            * @param  None
    710            * @retval None
    711            */
    712           INTERRUPT_HANDLER(TIM4_UPD_OVF_IRQHandler, 23)
    713          { 
    714            
    715             TIM4->SR1 &= ~0x01;
    716             //-------------------extern unsigned int DisLedW_t,DisLedW_tt; 
    717             if(Delay_time_t > 0)
    718             {
    719               Delay_time_t -= 1;
    720             }
    721             
    722             //==================================== 
    723          }
    724          #endif /*STM8S903*/
    725          
    726          /**
    727            * @brief  Eeprom EEC Interrupt routine
    728            * @param  None
    729            * @retval None
    730            */
    731          INTERRUPT_HANDLER(EEPROM_EEC_IRQHandler, 24)
    732          {
    733            /* In order to detect unexpected events during development,
    734               it is recommended to set a breakpoint on the following instruction.
    735            */
    736          }
    737          
    738          /**
    739            * @}
    740            */
    741          
    742          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     _A_TIM2_SR1                       1
     TRAP_IRQHandler                   2
     TLI_IRQHandler                    2
     AWU_IRQHandler                    8
     CLK_IRQHandler                    2
     EXTI_PORTA_IRQHandler             2
     EXTI_PORTB_IRQHandler             2
     EXTI_PORTC_IRQHandler             2
     EXTI_PORTD_IRQHandler            16
     EXTI_PORTE_IRQHandler             2
     SPI_IRQHandler                    2
     TIM1_UPD_OVF_TRG_BRK_IRQHandler
                                       2
     TIM1_CAP_COM_IRQHandler           2
     TIM2_UPD_OVF_BRK_IRQHandler     393
     cntr100ms                         1
     Init_Soc_Flag_Delay               2
     TIM2_CAP_COM_IRQHandler           2
     UART1_TX_IRQHandler               2
     UART1_RX_IRQHandler               1
     I2C_IRQHandler                    6
     ADC1_IRQHandler                   2
     TIM4_UPD_OVF_IRQHandler          14
     EEPROM_EEC_IRQHandler             1

 
   3 bytes in section .near.bss
   1 byte  in section .near.noinit
 465 bytes in section .near_func.text
 
 465 bytes of CODE memory
   3 bytes of DATA memory (+ 1 byte shared)

Errors: none
Warnings: none
