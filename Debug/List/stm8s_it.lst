###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.31.1.20058 [Evaluation] for STM810/Apr/2016  16:54:44 #
# Copyright 2010-2012 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0\sys\src #
#                    \stm8s_it.c                                              #
#    Command line =  D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0\sys\src #
#                    \stm8s_it.c -e --enable_multibytes -Ohz --debug          #
#                    --code_model small --data_model medium -o                #
#                    D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0\Debug\O #
#                    bj\ --dlib_config "C:\Program Files\IAR                  #
#                    Systems\Embedded Workbench 6.0                           #
#                    Evaluation\stm8\LIB\dlstm8smn.h" -lcN                    #
#                    D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0\Debug\L #
#                    ist\ -I D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0 #
#                    /user/\ -I D:\ProjectPath\STMPath\CH79_A0_C-version\CH79 #
#                    _A0/user/src/\ -I D:\ProjectPath\STMPath\CH79_A0_C-versi #
#                    on\CH79_A0/user/inc/\ -I D:\ProjectPath\STMPath\CH79_A0_ #
#                    C-version\CH79_A0/addon/\ -I                             #
#                    D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0/addon/s #
#                    rc/\ -I D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0 #
#                    /addon/inc/\ -I D:\ProjectPath\STMPath\CH79_A0_C-version #
#                    \CH79_A0/sys/\ -I D:\ProjectPath\STMPath\CH79_A0_C-versi #
#                    on\CH79_A0/sys/inc/\ -I D:\ProjectPath\STMPath\CH79_A0_C #
#                    -version\CH79_A0/sys/src/\ -I                            #
#                    D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0/lib/\   #
#                    -I D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0/lib/ #
#                    src/\ -I D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A #
#                    0/lib/inc/\ --vregs 16                                   #
#    List file    =  D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0\Debug\L #
#                    ist\stm8s_it.lst                                         #
#    Object file  =  D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0\Debug\O #
#                    bj\stm8s_it.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

D:\ProjectPath\STMPath\CH79_A0_C-version\CH79_A0\sys\src\stm8s_it.c
      1          /**
      2            ******************************************************************************
      3            * @file stm8s_it.c
      4            * @author STMicroelectronics - MCD Application Team
      5            * @version V2.0.0
      6            * @date 15-March-2011
      7            * @brief Main Interrupt Service Routines.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */ 
     21          
     22          /* Includes ------------------------------------------------------------------
     23          */
     24          #include "stm8s_it.h"
     25          #include "stm8s_tim4.h"
     26          #include "sysctrl.h"
     27          //#include "uart.h"
     28          #include "iostm8s003f3.h" 
     29          #include "user.h"
     30          #include "macro_def.h"
     31          
     32          #define   DIS_GIE    asm("sim")
     33          #define   EN_GIE     asm("rim")
     34           
     35            
     36          /** @addtogroup TIM2_OC_ActiveMode
     37            * @{
     38            */
     39          #ifdef _COSMIC_
     40          /**
     41            * @brief  Dummy interrupt routine
     42            * @param  None
     43            * @retval None
     44            */
     45          INTERRUPT_HANDLER(NonHandledInterrupt, 25)
     46          {
     47            /* In order to detect unexpected events during development,
     48               it is recommended to set a breakpoint on the following instruction.
     49            */
     50            nop();
     51          }
     52          #endif /*_COSMIC_*/
     53          
     54          /**
     55            * @brief  TRAP interrupt routine
     56            * @param  None
     57            * @retval None
     58            */
     59          INTERRUPT_HANDLER_TRAP(TRAP_IRQHandler)
     60          {
     61            /* In order to detect unexpected events during development,
     62               it is recommended to set a breakpoint on the following instruction.
     63            */
     64            nop();
     65          }
     66          /**
     67            * @brief  Top Level Interrupt routine
     68            * @param  None
     69            * @retval None
     70            */
     71          INTERRUPT_HANDLER(TLI_IRQHandler, 0)
     72          {
     73            /* In order to detect unexpected events during development,
     74               it is recommended to set a breakpoint on the following instruction.
     75            */
     76            nop();
     77          }
     78          
     79          /**
     80            * @brief  Auto Wake Up Interrupt routine
     81            * @param  None
     82            * @retval None
     83            */
     84          INTERRUPT_HANDLER(AWU_IRQHandler, 1)
     85          {
     86            /* In order to detect unexpected events during development,
     87               it is recommended to set a breakpoint on the following instruction.
     88            */
     89             nop();
     90             AWU->CSR |= 0x00;
     91          }
     92          
     93          /**
     94            * @brief  Clock Controller Interrupt routine
     95            * @param  None
     96            * @retval None
     97            */
     98          INTERRUPT_HANDLER(CLK_IRQHandler, 2)
     99          {
    100            /* In order to detect unexpected events during development,
    101               it is recommended to set a breakpoint on the following instruction.
    102            */
    103            nop();
    104          }
    105          
    106          /**
    107            * @brief  External Interrupt PORTA Interrupt routine
    108            * @param  None
    109            * @retval None
    110            */
    111          INTERRUPT_HANDLER(EXTI_PORTA_IRQHandler, 3)
    112          {
    113            /* In order to detect unexpected events during development,
    114               it is recommended to set a breakpoint on the following instruction.
    115            */ 
    116              nop();
    117             
    118          }
    119          
    120          /**
    121            * @brief  External Interrupt PORTB Interrupt routine
    122            * @param  None
    123            * @retval None
    124            */
    125          INTERRUPT_HANDLER(EXTI_PORTB_IRQHandler, 4)
    126          {
    127            /* In order to detect unexpected events during development,
    128               it is recommended to set a breakpoint on the following instruction.
    129            */
    130            nop(); 
    131            //GPIO_Init(GPIOB, GPIO_PIN_5, GPIO_MODE_IN_PU_NO_IT);        //KEY1
    132          }
    133          ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    134          /**
    135            * @brief  External Interrupt PORTC Interrupt routine
    136            * @param  None
    137            * @retval None
    138            */
    139          INTERRUPT_HANDLER(EXTI_PORTC_IRQHandler, 5)
    140          {
    141            /* In order to detect unexpected events during development,
    142               it is recommended to set a breakpoint on the following instruction.
    143            */
    144            nop();
    145            
    146          }
    147          
    148          /**
    149            * @brief  External Interrupt PORTD Interrupt routine
    150            * @param  None
    151            * @retval None
    152            */
    153          INTERRUPT_HANDLER(EXTI_PORTD_IRQHandler, 6)
    154          {
    155            /* In order to detect unexpected events during development,
    156               it is recommended to set a breakpoint on the following instruction.
    157            */
    158            nop();  
    159            /**/ 
    160            //LED1_ON();
    161            AWU->CSR |= 0x00;
    162            //LowPower_MCU_Entry_Flag = 0;
    163            //LowPower_Entry_Delay_t = 0;
    164          }
    165          
    166          /**
    167            * @brief  External Interrupt PORTE Interrupt routine
    168            * @param  None
    169            * @retval None
    170            */
    171          INTERRUPT_HANDLER(EXTI_PORTE_IRQHandler, 7)
    172          {
    173            /* In order to detect unexpected events during development,
    174               it is recommended to set a breakpoint on the following instruction.
    175            */
    176            nop();
    177          }
    178          #ifdef STM8S903
    179          /**
    180            * @brief  External Interrupt PORTF Interrupt routine
    181            * @param  None
    182            * @retval None
    183            */
    184           INTERRUPT_HANDLER(EXTI_PORTF_IRQHandler, 8)
    185          {
    186            /* In order to detect unexpected events during development,
    187               it is recommended to set a breakpoint on the following instruction.
    188            */
    189            nop();
    190          }
    191          #endif /*STM8S903*/
    192          
    193          #if defined (STM8S208) || defined (STM8AF52Ax)
    194          /**
    195            * @brief CAN RX Interrupt routine.
    196            * @param  None
    197            * @retval None
    198            */
    199           INTERRUPT_HANDLER(CAN_RX_IRQHandler, 8)
    200          {
    201            /* In order to detect unexpected events during development,
    202               it is recommended to set a breakpoint on the following instruction.
    203            */
    204          }
    205          
    206          /**
    207            * @brief  CAN TX Interrupt routine
    208            * @param  None
    209            * @retval None
    210            */
    211           INTERRUPT_HANDLER(CAN_TX_IRQHandler, 9)
    212          {
    213            /* In order to detect unexpected events during development,
    214               it is recommended to set a breakpoint on the following instruction.
    215            */
    216          }
    217          #endif /*STM8S208 || STM8AF52Ax */
    218          
    219          /**
    220            * @brief  SPI Interrupt routine
    221            * @param  None
    222            * @retval None
    223            */
    224          INTERRUPT_HANDLER(SPI_IRQHandler, 10)
    225          {
    226            /* In order to detect unexpected events during development,
    227               it is recommended to set a breakpoint on the following instruction.
    228            */
    229            nop();
    230          }
    231          
    232          /**
    233            * @brief  Timer1 Update/Overflow/Trigger/Break Interrupt routine
    234            * @param  None
    235            * @retval None
    236            */
    237          INTERRUPT_HANDLER(TIM1_UPD_OVF_TRG_BRK_IRQHandler, 11)
    238          {
    239            /* In order to detect unexpected events during development,
    240               it is recommended to set a breakpoint on the following instruction.
    241            */
    242            
    243          //FOR DEBUG  
    244          //1MS INTERRUPT FOR USER CODE 
    245            //TIM1_ClearFlag(TIM1_FLAG_UPDATE);  
    246            //TimerCnt();  
    247          //FOR DEBUG  
    248            nop();
    249          
    250            
    251          }
    252          
    253          /**
    254            * @brief  Timer1 Capture/Compare Interrupt routine
    255            * @param  None
    256            * @retval None
    257            */
    258          INTERRUPT_HANDLER(TIM1_CAP_COM_IRQHandler, 12)
    259          {
    260            /* In order to detect unexpected events during development,
    261               it is recommended to set a breakpoint on the following instruction.
    262            */
    263            nop();
    264          }
    265          
    266          #ifdef STM8S903
    267          /**
    268            * @brief  Timer5 Update/Overflow/Break/Trigger Interrupt routine
    269            * @param  None
    270            * @retval None
    271            */
    272           INTERRUPT_HANDLER(TIM5_UPD_OVF_BRK_TRG_IRQHandler, 13)
    273          {
    274            /* In order to detect unexpected events during development,
    275               it is recommended to set a breakpoint on the following instruction.
    276            */
    277            nop();
    278          }
    279          /**
    280            * @brief  Timer5 Capture/Compare Interrupt routine
    281            * @param  None
    282            * @retval None
    283            */
    284          
    285           INTERRUPT_HANDLER(TIM5_CAP_COM_IRQHandler, 14)
    286          {
    287            /* In order to detect unexpected events during development,
    288               it is recommended to set a breakpoint on the following instruction.
    289            */
    290            nop();
    291          }
    292          
    293          #else /*STM8S208, STM8S207, STM8S105 or STM8S103 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    294          /**
    295            * @brief  Timer2 Update/Overflow/Break Interrupt routine
    296            * @param  None
    297            * @retval None
    298            */
    299           INTERRUPT_HANDLER(TIM2_UPD_OVF_BRK_IRQHandler, 13)
    300          {
    301            /* In order to detect unexpected events during development,
    302               it is recommended to set a breakpoint on the following instruction.
    303            */ 
    304            static uint8_t cntr100ms = 0; 
    305            static uint16_t Init_Soc_Flag_Delay = 0; 
    306            nop();
    307            TIM2_SR1 &= ~0x01;
    308            if(ChgExchangeMode_Cnt < 255)
    309            {
    310              ChgExchangeMode_Cnt += 1;
    311            }
    312            if(DisExchangeMode_Cnt < 255)
    313            {
    314              DisExchangeMode_Cnt += 1;
    315            }
    316            if(IdleExchangeMode_Cnt < 255)
    317            {
    318              IdleExchangeMode_Cnt += 1;
    319            }
    320            //===================================SOC
    321            if(Init_Soc_Flag == 0)
    322            {
    323              if((Init_Soc_Flag_Delay++) >= 200)
    324              {
    325                Init_Soc_Flag = 1;
    326                Init_Soc_Flag_Delay = 0;
    327              }
    328            }
    329            //if(Init_Soc_Flag ==1)
    330            {
    331              SOCAhIntergrate(); 
    332              if((cntr100ms++) >= 10)
    333              {
    334                cntr100ms = 0; 
    335                if(Init_Soc_Flag == 1)
    336                {
    337                  SOCCalculate(); // 100ms tick
    338                }
    339              }
    340            } 
    341            //======================================== 
    342            if(WorkMode != IDLE_MODE)
    343            {
    344              if(LedFlash_t < MAX_UINT16_T_NUM)
    345              {
    346                LedFlash_t += 1;
    347              } 
    348            }
    349            else
    350            {
    351              LedFlash_t = 0;
    352            }
    353            //=======================================
    354            if(Temp_Volt_Sample_Cnt < MAX_UINT16_T_NUM)
    355            {  
    356              Temp_Volt_Sample_Cnt += 1;
    357            }
    358            if(Cell_Volt_Sample_Cnt < MAX_UINT16_T_NUM)
    359            {  
    360              Cell_Volt_Sample_Cnt += 1;
    361            }
    362            if(CC_Volt_Sample_Cnt < MAX_UINT16_T_NUM)
    363            {  
    364              CC_Volt_Sample_Cnt += 1;
    365            } 
    366                if(Bits_flag.Bit.DisTemp || Bits_flag.Bit.ChgTemp )
    367                {
    368                  if(Temp_Protect_Delay_t < MAX_UINT16_T_NUM)
    369                  {
    370                    Temp_Protect_Delay_t += 1;
    371                  }
    372                }
    373            //=======================================
    374            if(WorkMode == CHARGE_MODE)
    375            {
    376               /*if(ChgTemp_cnt < 1000)
    377               {
    378                 ChgTemp_cnt += 1; 
    379               }*/
    380              if(Chg_Current_Val_Small_Errer_t < MAX_UINT16_T_NUM)
    381              {
    382                Chg_Current_Val_Small_Errer_t += 1;
    383              }
    384              if(Cell_Balance_Delay_t < MAX_UINT16_T_NUM)
    385              {
    386                Cell_Balance_Delay_t += 1;
    387              }
    388              if(ChgOv_t < MAX_UINT16_T_NUM)
    389              {
    390                ChgOv_t += 1;
    391              }
    392              if(ChgCurOv_t < MAX_UINT16_T_NUM)
    393              {
    394                ChgCurOv_t += 1;
    395              }
    396              if(Bits_flag.Bit.ChgCurOv )
    397              {
    398                if(ChgCurOv_Re_t < MAX_UINT16_T_NUM)
    399                {
    400                  ChgCurOv_Re_t += 1;
    401                }
    402              }
    403              else
    404              {
    405                ChgCurOv_Re_t = 0;
    406              }
    407            }
    408            else
    409            {
    410              //=======================================
    411              if(DisOv_t < MAX_UINT16_T_NUM)
    412              {
    413                DisOv_t += 1;
    414              }
    415              //=======================================
    416              /*
    417              if(Bits_flag.Bit.DisOv)
    418              {
    419                if( PowerOff_Delay_t < MAX_UINT16_T_NUM)
    420                {
    421                  PowerOff_Delay_t += 1;
    422                }
    423              }
    424              else
    425              {
    426                PowerOff_Delay_t = 0;
    427              } 
    428              */ 
    429              //=======================================
    430              if(WorkMode == DISCHARGE_MODE)
    431              { 
    432               if(DisTemp_cnt < 1000)
    433               {
    434                 DisTemp_cnt += 1; 
    435               }
    436                if(DisTemp_Lock_Cnt < 500)
    437                {
    438                  DisTemp_Lock_Cnt += 1;
    439                }
    440                //==============================
    441                if(Dis_First_Run_Flag == 0)
    442                {
    443                  if(Dis_First_Run_t < 200)
    444                  {
    445                    Dis_First_Run_t += 1;
    446                  }
    447                }
    448                else
    449                {
    450                  Dis_First_Run_t = 0;
    451                }
    452               /*
    453                //=======================================
    454                if(Bits_flag.Bit.DisCurShort)
    455                {
    456                  if( DisCurShort_Re_t < MAX_UINT16_T_NUM)
    457                  {
    458                    DisCurShort_Re_t += 1;
    459                  }
    460                }
    461                else
    462                {
    463                  DisCurShort_Re_t = 0;
    464                }
    465                
    466                //=======================================
    467                if(DisCurOv_t < MAX_UINT16_T_NUM)
    468                {
    469                  DisCurOv_t += 1;
    470                }
    471               */
    472                //=======================================
    473                if(DisCurOv_t1 < MAX_UINT16_T_NUM)
    474                {
    475                  DisCurOv_t1 += 1;
    476                }
    477                //=======================================
    478                if(DisCurOv_t2 < MAX_UINT16_T_NUM)
    479                {
    480                  DisCurOv_t2 += 1;
    481                }
    482                //======================================= 
    483              } 
    484            }
    485            //=======================================
    486            if(Bits_flag.Bit.AfeErr)
    487            {
    488              /*if(DEVICE_XREADY_Re_t < MAX_UINT16_T_NUM)
    489              {
    490                DEVICE_XREADY_Re_t += 1;
    491              }*/
    492              if(AfeErr_t < MAX_UINT16_T_NUM)
    493              {
    494                AfeErr_t += 1;
    495              }
    496            }
    497            /*
    498            else
    499            {
    500              DEVICE_XREADY_Re_t = 0; 
    501            }*/
    502            //=======================================
    503            if(WorkMode ==IDLE_MODE)
    504            {
    505              if(LowPower_Entry_Delay_t < MAX_UINT16_T_NUM)
    506              {
    507                LowPower_Entry_Delay_t += 1;
    508              }
    509              if(PowerOff_Delay_t < MAX_UINT16_T_NUM)
    510              {
    511                PowerOff_Delay_t += 1;
    512              }
    513              if(LedFlash_Off_t < MAX_UINT16_T_NUM)
    514              {
    515                LedFlash_Off_t += 1;
    516              }
    517              
    518            } 
    519          }
    520          
    521          /**
    522            * @brief  Timer2 Capture/Compare Interrupt routine
    523            * @param  None
    524            * @retval None
    525            */
    526           INTERRUPT_HANDLER(TIM2_CAP_COM_IRQHandler, 14)
    527          {
    528            /* In order to detect unexpected events during development,
    529               it is recommended to set a breakpoint on the following instruction.
    530            */
    531            nop();
    532          }
    533          #endif /*STM8S903*/
    534          
    535          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S105) || defined (STM8AF62Ax) ||\
    536              defined (STM8AF52Ax) || defined (STM8AF626x)
    537          /**
    538            * @brief Timer3 Update/Overflow/Break Interrupt routine.
    539            * @param  None
    540            * @retval None
    541            */
    542           INTERRUPT_HANDLER(TIM3_UPD_OVF_BRK_IRQHandler, 15)
    543          {
    544            /* In order to detect unexpected events during development,
    545               it is recommended to set a breakpoint on the following instruction.
    546            */
    547            nop();
    548          }
    549          
    550          /**
    551            * @brief  Timer3 Capture/Compare Interrupt routine
    552            * @param  None
    553            * @retval None
    554            */
    555           INTERRUPT_HANDLER(TIM3_CAP_COM_IRQHandler, 16)
    556          {
    557            /* In order to detect unexpected events during development,
    558               it is recommended to set a breakpoint on the following instruction.
    559            */
    560            nop();
    561          }
    562          #endif /*STM8S208, STM8S207 or STM8S105 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    563          
    564          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S103) || defined (STM8AF62Ax) ||\
    565              defined (STM8AF52Ax) || defined (STM8S903)
    566          /**
    567            * @brief  UART1 TX Interrupt routine
    568            * @param  None
    569            * @retval None
    570            */
    571           INTERRUPT_HANDLER(UART1_TX_IRQHandler, 17)
    572          {
    573            /* In order to detect unexpected events during development,
    574               it is recommended to set a breakpoint on the following instruction.
    575            */
    576            nop();
    577            //UART1_ClearFlag(UART1_FLAG_RXNE); 
    578            //if(*str!=0)
    579            //UART1_SendData8(*srt);
    580            //srt++;
    581          
    582            
    583          }
    584          
    585          /**
    586            * @brief  UART1 RX Interrupt routine
    587            * @param  None
    588            * @retval None
    589            */
    590           INTERRUPT_HANDLER(UART1_RX_IRQHandler, 18)
    591          {
    592            /* In order to detect unexpected events during development,
    593               it is recommended to set a breakpoint on the following instruction.
    594            */
    595            
    596            //UART1_ClearFlag(UART1_FLAG_RXNE); 
    597            //Uart1DataReceived();
    598            //UART1_SR &=0xD7;
    599            //UART_Revc = UART1_DR; 
    600          }
    601          #endif /*STM8S105*/
    602          
    603          /**
    604            * @brief  I2C Interrupt routine
    605            * @param  None
    606            * @retval None
    607            */
    608          INTERRUPT_HANDLER(I2C_IRQHandler, 19)
    609          {
    610            /* In order to detect unexpected events during development,
    611               it is recommended to set a breakpoint on the following instruction.
    612            */
    613            nop();
    614            I2C->SR1 = 0; 
    615          }
    616          
    617          #if defined (STM8S105) || defined (STM8AF626x)
    618          /**
    619            * @brief  UART2 TX interrupt routine.
    620            * @param  None
    621            * @retval None
    622            */
    623           INTERRUPT_HANDLER(UART2_TX_IRQHandler, 20)
    624          {
    625              /* In order to detect unexpected events during development,
    626                 it is recommended to set a breakpoint on the following instruction.
    627              */
    628            nop();
    629            }
    630          
    631          /**
    632            * @brief  UART2 RX interrupt routine.
    633            * @param  None
    634            * @retval None
    635            */
    636           INTERRUPT_HANDLER(UART2_RX_IRQHandler, 21)
    637          {
    638              /* In order to detect unexpected events during development,
    639                 it is recommended to set a breakpoint on the following instruction.
    640              */
    641            nop();
    642            }
    643          #endif /* STM8S105*/
    644          
    645          #if defined(STM8S207) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    646          /**
    647            * @brief  UART3 TX interrupt routine.
    648            * @param  None
    649            * @retval None
    650            */
    651           INTERRUPT_HANDLER(UART3_TX_IRQHandler, 20)
    652          {
    653              /* In order to detect unexpected events during development,
    654                 it is recommended to set a breakpoint on the following instruction.
    655              */
    656            nop();
    657            }
    658          
    659          /**
    660            * @brief  UART3 RX interrupt routine.
    661            * @param  None
    662            * @retval None
    663            */
    664           INTERRUPT_HANDLER(UART3_RX_IRQHandler, 21)
    665          {
    666              /* In order to detect unexpected events during development,
    667                 it is recommended to set a breakpoint on the following instruction.
    668              */
    669            nop();
    670            }
    671          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    672          
    673          #if defined(STM8S207) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    674          /**
    675            * @brief  ADC2 interrupt routine.
    676            * @param  None
    677            * @retval None
    678            */
    679           INTERRUPT_HANDLER(ADC2_IRQHandler, 22)
    680          {
    681          
    682              /* In order to detect unexpected events during development,
    683                 it is recommended to set a breakpoint on the following instruction.
    684              */
    685            nop();
    686              return;
    687          
    688          }
    689          #else /*STM8S105, STM8S103 or STM8S903 or STM8AF626x */
    690          /**
    691            * @brief  ADC1 interrupt routine.
    692            * @param  None
    693            * @retval None
    694            */
    695           INTERRUPT_HANDLER(ADC1_IRQHandler, 22)
    696          {
    697          
    698              /* In order to detect unexpected events during development,
    699                 it is recommended to set a breakpoint on the following instruction.
    700              */
    701            nop();
    702              return;
    703          
    704          }
    705          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    706          
    707          #ifdef STM8S903
    708          /**
    709            * @brief  Timer6 Update/Overflow/Trigger Interrupt routine
    710            * @param  None
    711            * @retval None
    712            */
    713          INTERRUPT_HANDLER(TIM6_UPD_OVF_TRG_IRQHandler, 23)
    714          {
    715            /* In order to detect unexpected events during development,
    716               it is recommended to set a breakpoint on the following instruction.
    717            */
    718          //200uS INTERRUPT FOR USER CODE 
    719           TIM6_ClearFlag(TIM6_FLAG_UPDATE);
    720          
    721            nop();
    722           //TIM6_SR1 = 0x00;
    723          //--------------------test only
    724          
    725           //GPIO_WriteReverse(GPIOD, GPIO_PIN_2 | GPIO_PIN_3 |GPIO_PIN_4 |GPIO_PIN_5);
    726          
    727            
    728              
    729            }  
    730          #else /*STM8S208, STM8S207, STM8S105 or STM8S103 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    731          /**
    732            * @brief  Timer4 Update/Overflow Interrupt routine
    733            * @param  None
    734            * @retval None
    735            */
    736           INTERRUPT_HANDLER(TIM4_UPD_OVF_IRQHandler, 23)
    737          { 
    738            
    739             TIM4->SR1 &= ~0x01;
    740             //-------------------extern unsigned int DisLedW_t,DisLedW_tt; 
    741             if(Delay_time_t > 0)
    742             {
    743               Delay_time_t -= 1;
    744             }
    745             
    746             //==================================== 
    747          }
    748          #endif /*STM8S903*/
    749          
    750          /**
    751            * @brief  Eeprom EEC Interrupt routine
    752            * @param  None
    753            * @retval None
    754            */
    755          INTERRUPT_HANDLER(EEPROM_EEC_IRQHandler, 24)
    756          {
    757            /* In order to detect unexpected events during development,
    758               it is recommended to set a breakpoint on the following instruction.
    759            */
    760          }
    761          
    762          /**
    763            * @}
    764            */
    765          
    766          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     _A_TIM2_SR1                       1
     TRAP_IRQHandler                   2
     TLI_IRQHandler                    2
     AWU_IRQHandler                    8
     CLK_IRQHandler                    2
     EXTI_PORTA_IRQHandler             2
     EXTI_PORTB_IRQHandler             2
     EXTI_PORTC_IRQHandler             2
     EXTI_PORTD_IRQHandler             8
     EXTI_PORTE_IRQHandler             2
     SPI_IRQHandler                    2
     TIM1_UPD_OVF_TRG_BRK_IRQHandler
                                       2
     TIM1_CAP_COM_IRQHandler           2
     TIM2_UPD_OVF_BRK_IRQHandler     413
     cntr100ms                         1
     Init_Soc_Flag_Delay               2
     TIM2_CAP_COM_IRQHandler           2
     UART1_TX_IRQHandler               2
     UART1_RX_IRQHandler               1
     I2C_IRQHandler                    6
     ADC1_IRQHandler                   2
     TIM4_UPD_OVF_IRQHandler          14
     EEPROM_EEC_IRQHandler             1

 
   3 bytes in section .near.bss
   1 byte  in section .near.noinit
 477 bytes in section .near_func.text
 
 477 bytes of CODE memory
   3 bytes of DATA memory (+ 1 byte shared)

Errors: none
Warnings: none
